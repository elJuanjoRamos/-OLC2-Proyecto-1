/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,22],$V2=[1,21],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,28],$V8=[1,29],$V9=[1,27],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[5,23,24,45,68,69,70,71,75,77,78,79,83,84,85,91,93],$Ve=[1,49],$Vf=[1,50],$Vg=[1,45],$Vh=[1,46],$Vi=[1,51],$Vj=[1,52],$Vk=[1,53],$Vl=[1,54],$Vm=[1,55],$Vn=[1,60],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,79],$Vt=[1,87],$Vu=[1,88],$Vv=[1,81],$Vw=[1,82],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,89],$VC=[1,90],$VD=[1,91],$VE=[1,92],$VF=[25,29,33,37,38,39,41,50,51,52,53,54,55,56,57,58,59],$VG=[1,120],$VH=[27,29,31,37,39,41],$VI=[37,41],$VJ=[25,29,33,37,38,39,41,50,51,56,57,58,59],$VK=[5,23,24,45,68,69,70,71,75,76,77,78,79,83,84,85,91,93],$VL=[1,161],$VM=[2,34],$VN=[25,29,33,37,38,39,41,50,51,52,53,56,57,58,59],$VO=[25,29,33,37,38,39,41,56,57,58,59],$VP=[25,29,33,37,41,56,57,58,59],$VQ=[1,200],$VR=[1,202],$VS=[33,37,41],$VT=[1,219],$VU=[1,234],$VV=[75,83,84],$VW=[2,117],$VX=[75,93];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"CONST_DECLARATION":8,"DECLARATION_NOTYPE":9,"BREAK":10,"CONTINUE":11,"RETURN":12,"IF":13,"SWITCH":14,"WHILE":15,"DOWHILE":16,"FOR":17,"CONSOLE":18,"LLAMADA_FUNCION":19,"FUNCIONES":20,"PUSH":21,"POP":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"ARRAY_CONTENT":40,",":41,".":42,"RESERV_PUSH":43,"RESERV_POP":44,"RESERV_CONST":45,"RESERV_STRING":46,"RESERV_NUMBER":47,"RESERV_BOOLEAN":48,"RESERV_ANY":49,"+":50,"-":51,"*":52,"/":53,"%":54,"^":55,"==":56,"!=":57,"&&":58,"||":59,"!":60,"IDENTIFICADOR":61,"CADENA":62,"NUMERO":63,"DECIMAL":64,"RESERV_TRUE":65,"RESERV_FALSE":66,"IDEN_ARRAY":67,"RESERV_BREAK":68,"RESERV_CONTINUE":69,"RESERV_RETURN":70,"RESERV_IF":71,"SENTENCIA":72,"ELIF":73,"{":74,"}":75,"RESERV_ELSE":76,"RESERV_WHILE":77,"RESERV_DO":78,"RESERV_SWITCH":79,"CASES":80,"DEFAULT":81,"CASE":82,"RESERV_CASE":83,"RESERV_DEFAULT":84,"RESERV_FOR":85,"DECLA_FOR":86,"RESERV_VAR":87,"RESERV_IN":88,"RESERV_OF":89,"DECLARACION_FOR":90,"RESERV_CONSOLE":91,"RESERV_LOG":92,"RESERV_FUNCTION":93,"SENTENCIA_FUNCION":94,"PARAMETROS":95,"FUNCIONHIJA":96,"FUNCION_HIJA":97,"OTRA_INSTRUCCION":98,"PARAMETRO":99,"PARAMETROS_LLAMADA":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",41:",",42:".",43:"RESERV_PUSH",44:"RESERV_POP",45:"RESERV_CONST",46:"RESERV_STRING",47:"RESERV_NUMBER",48:"RESERV_BOOLEAN",49:"RESERV_ANY",50:"+",51:"-",52:"*",53:"/",54:"%",55:"^",56:"==",57:"!=",58:"&&",59:"||",60:"!",62:"CADENA",63:"NUMERO",64:"DECIMAL",65:"RESERV_TRUE",66:"RESERV_FALSE",68:"RESERV_BREAK",69:"RESERV_CONTINUE",70:"RESERV_RETURN",71:"RESERV_IF",74:"{",75:"}",76:"RESERV_ELSE",77:"RESERV_WHILE",78:"RESERV_DO",79:"RESERV_SWITCH",83:"RESERV_CASE",84:"RESERV_DEFAULT",85:"RESERV_FOR",87:"RESERV_VAR",88:"RESERV_IN",89:"RESERV_OF",91:"RESERV_CONSOLE",92:"RESERV_LOG",93:"RESERV_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[30,2],[32,1],[32,0],[40,3],[40,1],[21,7],[22,5],[8,7],[8,5],[9,6],[9,7],[9,4],[26,1],[26,1],[26,1],[26,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[61,3],[61,1],[61,1],[61,1],[61,1],[61,1],[61,4],[61,1],[67,1],[67,1],[10,2],[11,2],[12,2],[12,3],[13,6],[72,3],[72,2],[73,2],[73,2],[73,0],[15,5],[16,7],[14,8],[80,2],[80,1],[82,4],[81,3],[81,0],[17,9],[17,8],[17,8],[17,8],[17,8],[86,1],[86,3],[90,6],[90,4],[90,6],[90,4],[18,7],[20,5],[20,6],[94,3],[94,2],[96,2],[97,5],[97,6],[98,2],[98,0],[95,3],[95,1],[99,3],[19,4],[19,5],[100,3],[100,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 92:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 36: case 93:

        this.$ = [$$[$0]]
    
break;
case 4: case 6: case 10: case 12: case 13: case 14: case 15: case 67: case 68:

        this.$ = $$[$0]
    
break;
case 5: case 8: case 9: case 16: case 124:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 7: case 11: case 17: case 18: case 19: case 86: case 87: case 117: case 119:

        this.$ = $$[$0];
    
break;
case 20:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 21:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Arrays($$[$0-8], $$[$0-6], $$[$0-2],  _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 25:

        this.$ = new Arrays($$[$0-4], $$[$0-2], null,  _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new ArrayObject($$[$0-10], $$[$0-8], $$[$0-2],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 27:

        this.$ = new Arrays($$[$0-10], $$[$0-6], $$[$0-3],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 28:

        this.$ = new Arrays($$[$0-6], $$[$0-2], null,  _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 29:

        this.$ = new ArrayObject($$[$0-12], $$[$0-8], $$[$0-2],  _$[$0-13].first_line, _$[$0-13].first_column);
    
break;
case 30:

        this.$ = new Arrays($$[$0-5], 7, $$[$0-2],  _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31:

        this.$ = new ArrayObject($$[$0-7], 7, $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 33: case 102:
 this.$ = $$[$0] 
break;
case 34:
 this.$ = null 
break;
case 35:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2]
    
break;
case 37:

        this.$ = new Pushs($$[$0-6], $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 38:

        this.$ = new Pop($$[$0-4], _$[$0-4].first_line, _$[$0-4].first_column)
    
break;
case 39:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 40:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 41:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 42:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 43:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 44:

        this.$ = 1;
    
break;
case 45:
 
        this.$ = 0;
    
break;
case 46:
 
        this.$ = 2;
    
break;
case 47:
 
        this.$ = 7;
    
break;
case 48:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 55:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 56:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 59:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 60:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 65:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69: case 112: case 113: case 116:

        this.$ = $$[$0-1];
    
break;
case 70:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 71: case 72:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 73: case 74:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 75:
 
        this.$ = new Access($$[$0-3] + '[' + $$[$0-1] + ']', _$[$0-3].first_line, _$[$0-3].first_column)
    
break;
case 76:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 77: case 78:
 
        this.$ = $$[$0]
    
break;
case 79:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 80: case 81:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 82:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 83:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 84:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 85: case 88: case 96:

        this.$ = null;
    
break;
case 89:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 90:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 91:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 94:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 95:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 97:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 98: case 99:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FORIN(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 100: case 101:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FOROF(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 103:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 105:

        this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 106:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 107:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 108:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 109: case 114:

        this.$ = $$[$0-4];
    
break;
case 110: case 115:

        this.$ = $$[$0-5];
    
break;
case 111: case 118: case 120:

        this.$ = $$[$0-2];
    
break;
case 121:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 122:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 123:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},{1:[3]},{5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{24:[1,35]},{24:[1,36]},{25:[1,37],27:[1,38],36:[1,39],42:[1,40]},{29:[1,41]},{29:[1,42]},{22:47,24:$Ve,28:44,29:[1,43],36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{36:[1,56]},{36:[1,57]},{36:[1,58]},{72:59,74:$Vn},{36:[1,61]},{42:[1,62]},{24:[1,63]},{1:[2,1]},o($Vd,[2,2]),{25:[1,64],27:[1,65],29:[1,66]},{25:[1,67],27:[1,68]},{26:69,46:$Vo,47:$Vp,48:$Vq,49:$Vr},{22:47,24:$Ve,28:74,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:77,36:$Vf,37:[1,75],51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm,100:76},{43:[1,78],44:$Vs},o($Vd,[2,79]),o($Vd,[2,80]),o($Vd,[2,81]),{29:[1,80],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{22:47,24:$Ve,28:93,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:94,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VF,[2,67]),o($VF,[2,68]),o($VF,[2,76],{31:[1,96],42:[1,95]}),{22:47,24:$Ve,28:97,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74]),{22:47,24:$Ve,28:98,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:99,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:100,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{77:[1,101]},{4:102,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,75:[1,103],77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},{23:[1,106],24:[1,108],86:104,87:[1,105],90:107},{92:[1,109]},{36:[1,110]},{26:111,35:[1,112],46:$Vo,47:$Vp,48:$Vq,49:$Vr},{22:47,24:$Ve,28:113,31:[1,114],34:[1,115],36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($Vd,[2,23]),{26:116,46:$Vo,47:$Vp,48:$Vq,49:$Vr},{22:47,24:$Ve,28:117,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{27:[1,118],30:119,31:$VG},o($VH,[2,44]),o($VH,[2,45]),o($VH,[2,46]),o($VH,[2,47]),{29:[1,121],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{29:[1,122]},{37:[1,123],41:[1,124]},o($VI,[2,124],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),{36:[1,125]},{36:[1,126]},o($Vd,[2,82]),{22:47,24:$Ve,28:127,36:$Vf,50:[1,128],51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:129,36:$Vf,51:[1,130],60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:131,36:$Vf,51:$Vg,52:[1,132],60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:133,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:134,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:135,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,27:[1,137],28:136,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,27:[1,139],28:138,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:140,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:141,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:142,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:143,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VJ,[2,55],{52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VF,[2,64]),{44:$Vs},{24:[1,146],63:[1,145],67:144},{37:[1,147],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{37:[1,148],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{37:[1,149],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{37:[1,150],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{36:[1,151]},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,75:[1,152],77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},o($VK,[2,85]),{29:[1,153]},{24:[1,154]},{24:[1,155]},{29:[2,102]},{27:[1,156]},{36:[1,157]},{24:$VL,37:[1,158],95:159,99:160},{27:[1,162],29:[1,163],30:164,31:$VG},{38:[1,165]},{29:[1,166],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{22:47,24:$Ve,28:169,32:167,33:$VM,36:$Vf,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{35:[1,170]},{27:[1,171]},{29:[1,172],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{22:47,24:$Ve,28:173,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{27:[1,174]},{33:[1,175]},o($Vd,[2,43]),o($Vd,[2,121]),{29:[1,176]},{22:47,24:$Ve,28:177,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:178,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{37:[1,179]},o($VJ,[2,48],{52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VF,[2,65]),o($VJ,[2,49],{52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VF,[2,66],{22:47,61:48,28:93,24:$Ve,36:$Vf,60:$Vh,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm}),o($VN,[2,50],{54:$Vz,55:$VA}),{22:47,24:$Ve,28:180,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VN,[2,51],{54:$Vz,55:$VA}),o($VF,[2,52]),o($VF,[2,53]),o($VO,[2,56],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{22:47,24:$Ve,28:181,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VO,[2,57],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{22:47,24:$Ve,28:182,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VP,[2,60],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VP,[2,61],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o([25,29,33,37,41,58,59],[2,62],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC}),o([25,29,33,37,41,59],[2,63],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD}),{33:[1,183]},{33:[2,77]},{33:[2,78]},o($VF,[2,69]),{72:184,74:$Vn},{74:[1,185]},{72:186,74:$Vn},{22:47,24:$Ve,28:187,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VK,[2,84]),{22:47,24:$Ve,28:188,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{25:[1,191],27:[1,192],88:[1,189],89:[1,190]},{25:[1,195],27:[1,196],88:[1,193],89:[1,194]},{22:47,24:$Ve,28:197,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:198,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{74:$VQ,94:199},{37:[1,201],41:$VR},o($VI,[2,119]),{25:[1,203]},{22:47,24:$Ve,28:204,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($Vd,[2,21]),{27:[1,205],29:[1,206]},{26:207,46:$Vo,47:$Vp,48:$Vq,49:$Vr},o($Vd,[2,22]),{33:[1,208]},o([33,37],[2,33],{41:[1,209]}),o($VS,[2,36],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),{36:[1,210]},{22:47,24:$Ve,28:211,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($Vd,[2,40]),{29:[1,212],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{22:47,24:$Ve,28:213,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o([27,29],[2,32]),o($Vd,[2,122]),o($VI,[2,123],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),{37:[1,214],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},o([5,23,24,25,29,33,37,38,39,41,45,50,51,52,53,54,55,56,57,58,59,68,69,70,71,75,77,78,79,83,84,85,91,93],[2,38]),o($VN,[2,54],{54:$Vz,55:$VA}),o($VO,[2,58],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VO,[2,59],{50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VF,[2,75]),o($Vd,[2,88],{73:215,76:[1,216]}),{80:217,82:218,83:$VT},o($Vd,[2,89]),{37:[1,220],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{29:[1,221],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{24:[1,222]},{24:[1,223]},{26:224,46:$Vo,47:$Vp,48:$Vq,49:$Vr},{22:47,24:$Ve,28:225,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{24:[1,226]},{24:[1,227]},{26:228,46:$Vo,47:$Vp,48:$Vq,49:$Vr},{22:47,24:$Ve,28:229,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{29:[2,103],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{37:[1,230],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},o($Vd,[2,109]),{75:[1,232],93:$VU,96:231,97:233},{74:$VQ,94:235},{24:$VL,99:236},{26:237,46:$Vo,47:$Vp,48:$Vq,49:$Vr},{29:[1,238],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{31:[1,239],34:[1,240]},o($Vd,[2,25]),{39:[1,241]},{29:[1,242]},{22:47,24:$Ve,28:243,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:169,32:244,36:$Vf,37:$VM,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{29:[1,245],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},o($Vd,[2,41]),{29:[1,246],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{29:[1,247]},o($Vd,[2,83]),{13:249,71:$V6,72:248,74:$Vn},{75:[2,96],81:250,82:251,83:$VT,84:[1,252]},o($VV,[2,93]),{22:47,24:$Ve,28:253,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{29:[1,254]},{22:47,24:$Ve,28:255,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{37:[1,256]},{37:[1,257]},{27:[1,258]},{29:[2,105],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{37:[1,259]},{37:[1,260]},{27:[1,261]},{29:[2,107],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{29:[1,262]},{75:[1,263]},o($Vd,[2,112]),{75:$VW,93:$VU,97:265,98:264},{24:[1,266]},o($Vd,[2,110]),o($VI,[2,118]),o($VI,[2,120]),o($Vd,[2,20]),{22:47,24:$Ve,28:169,32:267,33:$VM,36:$Vf,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{35:[1,268]},{27:[1,269],29:[1,270]},o($Vd,[2,30]),o($VS,[2,35],{38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE}),{37:[1,271]},o($Vd,[2,39]),o($Vd,[2,42]),o($Vd,[2,37]),o($Vd,[2,86]),o($Vd,[2,87]),{75:[1,272]},o($VV,[2,92]),{25:[1,273]},{25:[1,274],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},o($Vd,[2,90]),{37:[1,275],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{72:276,74:$Vn},{72:277,74:$Vn},{22:47,24:$Ve,28:278,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{72:279,74:$Vn},{72:280,74:$Vn},{22:47,24:$Ve,28:281,36:$Vf,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($Vd,[2,108]),o($Vd,[2,111]),{75:[2,113]},{75:$VW,93:$VU,97:265,98:282},{36:[1,283]},{33:[1,284]},{36:[1,285]},{31:[1,286],34:[1,287]},o($Vd,[2,28]),{29:[1,288]},o($Vd,[2,91]),{4:289,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},{4:290,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},{72:291,74:$Vn},o($Vd,[2,98]),o($Vd,[2,100]),{29:[2,104],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},o($Vd,[2,99]),o($Vd,[2,101]),{29:[2,106],38:$Vt,39:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA,56:$VB,57:$VC,58:$VD,59:$VE},{75:[2,116]},{24:$VL,37:[1,292],95:293,99:160},{29:[1,294]},{22:47,24:$Ve,28:169,32:295,36:$Vf,37:$VM,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{22:47,24:$Ve,28:169,32:296,33:$VM,36:$Vf,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},{35:[1,297]},o($Vd,[2,31]),{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,75:[2,95],77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc},o($VV,[2,94],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,6:34,23:$V0,24:$V1,45:$V2,68:$V3,69:$V4,70:$V5,71:$V6,77:$V7,78:$V8,79:$V9,85:$Va,91:$Vb,93:$Vc}),o($Vd,[2,97]),{74:$VQ,94:298},{37:[1,299],41:$VR},o($Vd,[2,24]),{37:[1,300]},{33:[1,301]},{36:[1,302]},o($VX,[2,114]),{74:$VQ,94:303},{29:[1,304]},{29:[1,305]},{22:47,24:$Ve,28:169,32:306,36:$Vf,37:$VM,40:168,51:$Vg,60:$Vh,61:48,62:$Vi,63:$Vj,64:$Vk,65:$Vl,66:$Vm},o($VX,[2,115]),o($Vd,[2,26]),o($Vd,[2,27]),{37:[1,307]},{29:[1,308]},o($Vd,[2,29])],
defaultActions: {33:[2,1],107:[2,102],145:[2,77],146:[2,78],264:[2,113],282:[2,116]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/type');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { FORIN } = require('../tools/sentences/ForIn');
    const { FOROF } = require('../tools/sentences/ForOf');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');
    const { Arrays } = require('../tools/declaration_type/Arrays');
    const { ArrayObject } = require('../tools/declaration_type/ArrayObject');
    const { Pushs } = require('../tools/sentences/Push');
    const { Pop } = require('../tools/sentences/Pop');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 64
break;
case 4:return 63
break;
case 5:return 62
break;
case 6:return 62
break;
case 7:return 62
break;
case 8:return 52
break;
case 9:return 53
break;
case 10:return 51
break;
case 11:return 50
break;
case 12:return 54
break;
case 13:return 55
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 41
break;
case 17:return 42
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 56
break;
case 23:return 57
break;
case 24:return 59
break;
case 25:return 58
break;
case 26:return 60
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 74
break;
case 31:return 75
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 75
break;
case 35:return 75
break;
case 36:return 23
break;
case 37:return 87
break;
case 38:return 45
break;
case 39:return 71
break;
case 40:return 76
break;
case 41:return 79
break;
case 42:return 84
break;
case 43:return 83
break;
case 44:return 77
break;
case 45:return 78
break;
case 46:return 85
break;
case 47:return 91
break;
case 48:return 92
break;
case 49:return 68
break;
case 50:return 69
break;
case 51:return 70
break;
case 52:return 93
break;
case 53:return 46
break;
case 54:return 47
break;
case 55:return 48
break;
case 56:return 65
break;
case 57:return 66
break;
case 58:return 89
break;
case 59:return 88
break;
case 60:return 43
break;
case 61:return 44
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 49
break;
case 65:return 24;
break;
case 66:return 5;
break;
case 67:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}