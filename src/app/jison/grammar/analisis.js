/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,22],$V2=[1,21],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,28],$V8=[1,29],$V9=[1,27],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[5,23,24,48,71,72,73,74,78,80,81,82,86,87,88,94,96],$Ve=[2,42],$Vf=[1,43],$Vg=[1,42],$Vh=[1,59],$Vi=[1,53],$Vj=[1,48],$Vk=[1,49],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,64],$Vr=[1,69],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[25,29,33,37,38,39,41,46,47,53,54,55,56,57,58,59,60,61,62],$Vx=[1,88],$Vy=[1,87],$Vz=[1,96],$VA=[1,97],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[25,29,33,37,38,39,41,53,54,55,56,57,58,59,60,61,62],$VM=[1,129],$VN=[27,29,31,37,39,41],$VO=[37,41],$VP=[25,29,33,37,38,39,41,53,54,59,60,61,62],$VQ=[5,23,24,48,71,72,73,74,78,79,80,81,82,86,87,88,94,96],$VR=[1,167],$VS=[1,179],$VT=[2,34],$VU=[25,29,31,33,37,38,39,41,45,46,47,53,54,55,56,57,58,59,60,61,62],$VV=[25,29,33,37,38,39,41,53,54,55,56,59,60,61,62],$VW=[25,29,33,37,38,39,41,59,60,61,62],$VX=[25,29,33,37,41,59,60,61,62],$VY=[1,208],$VZ=[1,210],$V_=[1,218],$V$=[33,37,41],$V01=[1,228],$V11=[1,243],$V21=[78,86,87],$V31=[2,124],$V41=[78,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"CONST_DECLARATION":8,"DECLARATION_NOTYPE":9,"BREAK":10,"CONTINUE":11,"RETURN":12,"IF":13,"SWITCH":14,"WHILE":15,"DOWHILE":16,"FOR":17,"CONSOLE":18,"LLAMADA_FUNCION":19,"FUNCIONES":20,"PUSH":21,"POP":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESSION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"ARRAY_CONTENT":40,",":41,"MORE_ARRAY":42,"PRODUCCION_ID":43,"MATRIZ_IDEN":44,".":45,"RESERV_PUSH":46,"RESERV_POP":47,"RESERV_CONST":48,"RESERV_STRING":49,"RESERV_NUMBER":50,"RESERV_BOOLEAN":51,"RESERV_ANY":52,"+":53,"-":54,"*":55,"/":56,"%":57,"^":58,"==":59,"!=":60,"&&":61,"||":62,"!":63,"IDENTIFICADOR":64,"CADENA":65,"NUMERO":66,"DECIMAL":67,"RESERV_TRUE":68,"RESERV_FALSE":69,"IDEN_ARRAY":70,"RESERV_BREAK":71,"RESERV_CONTINUE":72,"RESERV_RETURN":73,"RESERV_IF":74,"SENTENCIA":75,"ELIF":76,"{":77,"}":78,"RESERV_ELSE":79,"RESERV_WHILE":80,"RESERV_DO":81,"RESERV_SWITCH":82,"CASES":83,"DEFAULT":84,"CASE":85,"RESERV_CASE":86,"RESERV_DEFAULT":87,"RESERV_FOR":88,"DECLA_FOR":89,"RESERV_VAR":90,"RESERV_IN":91,"RESERV_OF":92,"DECLARACION_FOR":93,"RESERV_CONSOLE":94,"RESERV_LOG":95,"RESERV_FUNCTION":96,"SENTENCIA_FUNCION":97,"PARAMETROS":98,"FUNCIONHIJA":99,"FUNCION_HIJA":100,"OTRA_INSTRUCCION":101,"PARAMETRO":102,"PARAMETROS_LLAMADA":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",41:",",45:".",46:"RESERV_PUSH",47:"RESERV_POP",48:"RESERV_CONST",49:"RESERV_STRING",50:"RESERV_NUMBER",51:"RESERV_BOOLEAN",52:"RESERV_ANY",53:"+",54:"-",55:"*",56:"/",57:"%",58:"^",59:"==",60:"!=",61:"&&",62:"||",63:"!",65:"CADENA",66:"NUMERO",67:"DECIMAL",68:"RESERV_TRUE",69:"RESERV_FALSE",71:"RESERV_BREAK",72:"RESERV_CONTINUE",73:"RESERV_RETURN",74:"RESERV_IF",77:"{",78:"}",79:"RESERV_ELSE",80:"RESERV_WHILE",81:"RESERV_DO",82:"RESERV_SWITCH",86:"RESERV_CASE",87:"RESERV_DEFAULT",88:"RESERV_FOR",90:"RESERV_VAR",91:"RESERV_IN",92:"RESERV_OF",94:"RESERV_CONSOLE",95:"RESERV_LOG",96:"RESERV_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[30,2],[32,1],[32,0],[40,3],[40,1],[42,1],[42,3],[43,3],[43,2],[43,2],[43,1],[21,6],[22,4],[8,7],[8,5],[9,6],[9,7],[9,4],[26,1],[26,1],[26,1],[26,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[64,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[44,4],[44,3],[70,1],[70,1],[10,2],[11,2],[12,2],[12,3],[13,6],[75,3],[75,2],[76,2],[76,2],[76,0],[15,5],[16,7],[14,8],[83,2],[83,1],[85,4],[84,3],[84,0],[17,9],[17,8],[17,8],[17,8],[17,8],[89,1],[89,3],[93,6],[93,4],[93,6],[93,4],[18,7],[20,5],[20,6],[97,3],[97,2],[99,2],[100,5],[100,6],[101,2],[101,0],[98,3],[98,1],[102,3],[19,4],[19,5],[103,3],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 99:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 100:

        this.$ = [$$[$0]]
    
break;
case 4: case 6: case 10: case 12: case 13: case 14: case 15: case 73: case 74:

        this.$ = $$[$0]
    
break;
case 5: case 8: case 9: case 16: case 131:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 7: case 11: case 17: case 18: case 19: case 93: case 94: case 124: case 126:

        this.$ = $$[$0];
    
break;
case 20:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 21:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Arrays($$[$0-8], $$[$0-6], $$[$0-2],  _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 25:

        this.$ = new Arrays($$[$0-4], $$[$0-2], null,  _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new ArrayObject($$[$0-10], $$[$0-8], $$[$0-2],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 27:

        this.$ = new Arrays($$[$0-10], $$[$0-6], $$[$0-3],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 28:

        this.$ = new Arrays($$[$0-6], $$[$0-2], null,  _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 29:

        this.$ = new ArrayObject($$[$0-12], $$[$0-8], $$[$0-2],  _$[$0-13].first_line, _$[$0-13].first_column);
    
break;
case 30:

        this.$ = new Arrays($$[$0-5], 7, $$[$0-2],  _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31:

        this.$ = new ArrayObject($$[$0-7], 7, $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 33: case 109:
 this.$ = $$[$0] 
break;
case 34:
 this.$ = null 
break;
case 35:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2]
    
break;
case 36:

        this.$ = [$$[$0]]
    
    
break;
case 37:

        var cont = new ArrayParam($$[$0], false);
        this.$= cont
    
break;
case 38:

        var cont = new ArrayParam($$[$0-1], true);
        this.$= cont    
    
break;
case 39:
 this.$ = $$[$0-2] + $$[$0-1] 
break;
case 40:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 41:
 this.$= $$[$0-1] 
break;
case 42:
 this.$= $$[$0] 
break;
case 43:

        this.$ = new Pushs($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 44:

        this.$ = new Pop($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
    
break;
case 45:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 46:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 47:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 48:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 49:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 50:

        this.$ = 1;
    
break;
case 51:
 
        this.$ = 0;
    
break;
case 52:
 
        this.$ = 2;
    
break;
case 53:
 
        this.$ = 7;
    
break;
case 54:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 55:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 61:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 62:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 65:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 66:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 67:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 70:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 71:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 75: case 119: case 120: case 123:

        this.$ = $$[$0-1];
    
break;
case 76:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 77: case 78:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 79: case 80:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 81:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 82:
 
        this.$ = $$[$0-3] + '[' + $$[$0-1] + ']'
    
break;
case 83:
 
        this.$ = '[' + $$[$0-1] + ']'
    
break;
case 84: case 85:
 
        this.$ = $$[$0]
    
break;
case 86:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 87: case 88:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 89:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 90:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 91:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 92: case 95: case 103:

        this.$ = null;
    
break;
case 96:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 97:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 98:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 101:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 102:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 104:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 105: case 106:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FORIN(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 107: case 108:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FOROF(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 110:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 111:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 112:

        this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 113:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 114:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 115:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 116: case 121:

        this.$ = $$[$0-4];
    
break;
case 117: case 122:

        this.$ = $$[$0-5];
    
break;
case 118: case 125: case 127:

        this.$ = $$[$0-2];
    
break;
case 128:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 129:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 130:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{24:[1,36]},{24:[1,37]},o([46,47],$Ve,{44:41,25:[1,38],27:[1,39],31:$Vf,36:[1,40],45:$Vg}),{29:[1,44]},{29:[1,45]},{22:50,24:$Vh,28:47,29:[1,46],36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{36:[1,60]},{36:[1,61]},{36:[1,62]},{75:63,77:$Vq},{36:[1,65]},{45:[1,66]},{24:[1,67]},{46:[1,68],47:$Vr},{1:[2,1]},o($Vd,[2,2]),{25:[1,70],27:[1,71],29:[1,72]},{25:[1,73],27:[1,74]},{26:75,49:$Vs,50:$Vt,51:$Vu,52:$Vv},{22:50,24:$Vh,28:80,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:83,36:$Vi,37:[1,81],43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp,103:82},o($Vw,[2,40],{31:[1,85],45:[1,84]}),o($Vw,[2,41]),{24:$Vx,66:$Vy,70:86},o($Vd,[2,86]),o($Vd,[2,87]),o($Vd,[2,88]),{29:[1,89],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{22:50,24:$Vh,28:102,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:103,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VL,[2,73]),o($VL,[2,74]),o($VL,[2,81],{47:$Vr}),{22:50,24:$Vh,28:104,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VL,[2,76]),o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o([25,29,33,37,38,39,41,47,53,54,55,56,57,58,59,60,61,62],$Ve,{44:41,31:$Vf,45:$Vg}),{22:50,24:$Vh,28:105,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:106,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:107,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{80:[1,108]},{4:109,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,78:[1,110],80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},{23:[1,113],24:[1,115],89:111,90:[1,112],93:114},{95:[1,116]},{36:[1,117]},{36:[1,118]},{36:[1,119]},{26:120,35:[1,121],49:$Vs,50:$Vt,51:$Vu,52:$Vv},{22:50,24:$Vh,28:122,31:[1,123],34:[1,124],36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($Vd,[2,23]),{26:125,49:$Vs,50:$Vt,51:$Vu,52:$Vv},{22:50,24:$Vh,28:126,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{27:[1,127],30:128,31:$VM},o($VN,[2,50]),o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,53]),{29:[1,130],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{29:[1,131]},{37:[1,132],41:[1,133]},o($VO,[2,131],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($Vw,[2,39]),{24:$Vx,66:$Vy,70:134},{33:[1,135]},{33:[2,84]},{33:[2,85]},o($Vd,[2,89]),{22:50,24:$Vh,28:136,36:$Vi,43:52,53:[1,137],54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:138,36:$Vi,43:52,54:[1,139],63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:140,36:$Vi,43:52,54:$Vj,55:[1,141],63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:142,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:143,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:144,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,27:[1,146],28:145,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,27:[1,148],28:147,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:149,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:150,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:151,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:152,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VP,[2,61],{55:$VD,56:$VE,57:$VF,58:$VG}),o($VL,[2,70]),{37:[1,153],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{37:[1,154],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{37:[1,155],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{37:[1,156],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{36:[1,157]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,78:[1,158],80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},o($VQ,[2,92]),{29:[1,159]},{24:[1,160]},{24:[1,161]},{29:[2,109]},{27:[1,162]},{36:[1,163]},{24:$VR,37:[1,164],98:165,102:166},{22:50,24:$Vh,28:168,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{37:[1,169]},{27:[1,170],29:[1,171],30:172,31:$VM},{38:[1,173]},{29:[1,174],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{22:50,24:$Vh,28:178,31:$VS,32:175,33:$VT,36:$Vi,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{35:[1,180]},{27:[1,181]},{29:[1,182],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{22:50,24:$Vh,28:183,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{27:[1,184]},{33:[1,185]},o($Vd,[2,49]),o($Vd,[2,128]),{29:[1,186]},{22:50,24:$Vh,28:187,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{33:[1,188]},o($VU,[2,83]),o($VP,[2,54],{55:$VD,56:$VE,57:$VF,58:$VG}),o($VL,[2,71]),o($VP,[2,55],{55:$VD,56:$VE,57:$VF,58:$VG}),o($VL,[2,72],{22:50,64:51,43:52,28:102,24:$Vh,36:$Vi,63:$Vk,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp}),o($VV,[2,56],{57:$VF,58:$VG}),{22:50,24:$Vh,28:189,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VV,[2,57],{57:$VF,58:$VG}),o($VL,[2,58]),o($VL,[2,59]),o($VW,[2,62],{53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),{22:50,24:$Vh,28:190,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VW,[2,63],{53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),{22:50,24:$Vh,28:191,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VX,[2,66],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),o($VX,[2,67],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),o([25,29,33,37,41,61,62],[2,68],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o([25,29,33,37,41,62],[2,69],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VL,[2,75]),{75:192,77:$Vq},{77:[1,193]},{75:194,77:$Vq},{22:50,24:$Vh,28:195,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($VQ,[2,91]),{22:50,24:$Vh,28:196,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{25:[1,199],27:[1,200],91:[1,197],92:[1,198]},{25:[1,203],27:[1,204],91:[1,201],92:[1,202]},{22:50,24:$Vh,28:205,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:206,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{77:$VY,97:207},{37:[1,209],41:$VZ},o($VO,[2,126]),{25:[1,211]},{37:[1,212],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o([5,23,24,25,29,33,37,38,39,41,48,53,54,55,56,57,58,59,60,61,62,71,72,73,74,78,80,81,82,86,87,88,94,96],[2,44]),{22:50,24:$Vh,28:213,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($Vd,[2,21]),{27:[1,214],29:[1,215]},{26:216,49:$Vs,50:$Vt,51:$Vu,52:$Vv},o($Vd,[2,22]),{33:[1,217]},o([33,37],[2,33],{41:$V_}),o($V$,[2,36]),o($V$,[2,37],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),{22:50,24:$Vh,28:178,31:$VS,36:$Vi,40:219,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{36:[1,220]},{22:50,24:$Vh,28:221,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($Vd,[2,46]),{29:[1,222],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{22:50,24:$Vh,28:223,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o([27,29],[2,32]),o($Vd,[2,129]),o($VO,[2,130],{38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK}),o($VU,[2,82]),o($VV,[2,60],{57:$VF,58:$VG}),o($VW,[2,64],{53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),o($VW,[2,65],{53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG}),o($Vd,[2,95],{76:224,79:[1,225]}),{83:226,85:227,86:$V01},o($Vd,[2,96]),{37:[1,229],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{29:[1,230],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{24:[1,231]},{24:[1,232]},{26:233,49:$Vs,50:$Vt,51:$Vu,52:$Vv},{22:50,24:$Vh,28:234,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{24:[1,235]},{24:[1,236]},{26:237,49:$Vs,50:$Vt,51:$Vu,52:$Vv},{22:50,24:$Vh,28:238,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{29:[2,110],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{37:[1,239],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vd,[2,116]),{78:[1,241],96:$V11,99:240,100:242},{77:$VY,97:244},{24:$VR,102:245},{26:246,49:$Vs,50:$Vt,51:$Vu,52:$Vv},{29:[1,247]},{29:[1,248],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{31:[1,249],34:[1,250]},o($Vd,[2,25]),{39:[1,251]},{29:[1,252]},{22:50,24:$Vh,28:178,31:$VS,36:$Vi,42:253,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{33:[1,254],41:$V_},{22:50,24:$Vh,28:178,31:$VS,32:255,36:$Vi,37:$VT,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{29:[1,256],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vd,[2,47]),{29:[1,257],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vd,[2,90]),{13:259,74:$V6,75:258,77:$Vq},{78:[2,103],84:260,85:261,86:$V01,87:[1,262]},o($V21,[2,100]),{22:50,24:$Vh,28:263,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{29:[1,264]},{22:50,24:$Vh,28:265,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{37:[1,266]},{37:[1,267]},{27:[1,268]},{29:[2,112],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{37:[1,269]},{37:[1,270]},{27:[1,271]},{29:[2,114],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{29:[1,272]},{78:[1,273]},o($Vd,[2,119]),{78:$V31,96:$V11,100:275,101:274},{24:[1,276]},o($Vd,[2,117]),o($VO,[2,125]),o($VO,[2,127]),o($Vd,[2,43]),o($Vd,[2,20]),{22:50,24:$Vh,28:178,31:$VS,32:277,33:$VT,36:$Vi,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{35:[1,278]},{27:[1,279],29:[1,280]},o($Vd,[2,30]),o($V$,[2,35]),o($V$,[2,38]),{37:[1,281]},o($Vd,[2,45]),o($Vd,[2,48]),o($Vd,[2,93]),o($Vd,[2,94]),{78:[1,282]},o($V21,[2,99]),{25:[1,283]},{25:[1,284],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vd,[2,97]),{37:[1,285],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{75:286,77:$Vq},{75:287,77:$Vq},{22:50,24:$Vh,28:288,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{75:289,77:$Vq},{75:290,77:$Vq},{22:50,24:$Vh,28:291,36:$Vi,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($Vd,[2,115]),o($Vd,[2,118]),{78:[2,120]},{78:$V31,96:$V11,100:275,101:292},{36:[1,293]},{33:[1,294]},{36:[1,295]},{31:[1,296],34:[1,297]},o($Vd,[2,28]),{29:[1,298]},o($Vd,[2,98]),{4:299,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},{4:300,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},{75:301,77:$Vq},o($Vd,[2,105]),o($Vd,[2,107]),{29:[2,111],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},o($Vd,[2,106]),o($Vd,[2,108]),{29:[2,113],38:$Vz,39:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK},{78:[2,123]},{24:$VR,37:[1,302],98:303,102:166},{29:[1,304]},{22:50,24:$Vh,28:178,31:$VS,32:305,36:$Vi,37:$VT,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{22:50,24:$Vh,28:178,31:$VS,32:306,33:$VT,36:$Vi,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},{35:[1,307]},o($Vd,[2,31]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,78:[2,102],80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc},o($V21,[2,101],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,43:33,6:35,23:$V0,24:$V1,48:$V2,71:$V3,72:$V4,73:$V5,74:$V6,80:$V7,81:$V8,82:$V9,88:$Va,94:$Vb,96:$Vc}),o($Vd,[2,104]),{77:$VY,97:308},{37:[1,309],41:$VZ},o($Vd,[2,24]),{37:[1,310]},{33:[1,311]},{36:[1,312]},o($V41,[2,121]),{77:$VY,97:313},{29:[1,314]},{29:[1,315]},{22:50,24:$Vh,28:178,31:$VS,32:316,36:$Vi,37:$VT,40:176,42:177,43:52,54:$Vj,63:$Vk,64:51,65:$Vl,66:$Vm,67:$Vn,68:$Vo,69:$Vp},o($V41,[2,122]),o($Vd,[2,26]),o($Vd,[2,27]),{37:[1,317]},{29:[1,318]},o($Vd,[2,29])],
defaultActions: {34:[2,1],87:[2,84],88:[2,85],114:[2,109],274:[2,120],292:[2,123]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/type');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { FORIN } = require('../tools/sentences/ForIn');
    const { FOROF } = require('../tools/sentences/ForOf');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');
    const { Arrays } = require('../tools/declaration_type/Arrays');
    const { ArrayObject } = require('../tools/declaration_type/ArrayObject');
    const { ArrayParam } = require('../tools/model/ArrayParam');
    const { Pushs } = require('../tools/sentences/Push');
    const { Pop } = require('../tools/sentences/Pop');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 67
break;
case 4:return 66
break;
case 5:return 65
break;
case 6:return 65
break;
case 7:return 65
break;
case 8:return 55
break;
case 9:return 56
break;
case 10:return 54
break;
case 11:return 53
break;
case 12:return 57
break;
case 13:return 58
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 41
break;
case 17:return 45
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 59
break;
case 23:return 60
break;
case 24:return 62
break;
case 25:return 61
break;
case 26:return 63
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 77
break;
case 31:return 78
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 78
break;
case 35:return 78
break;
case 36:return 23
break;
case 37:return 90
break;
case 38:return 48
break;
case 39:return 74
break;
case 40:return 79
break;
case 41:return 82
break;
case 42:return 87
break;
case 43:return 86
break;
case 44:return 80
break;
case 45:return 81
break;
case 46:return 88
break;
case 47:return 94
break;
case 48:return 95
break;
case 49:return 71
break;
case 50:return 72
break;
case 51:return 73
break;
case 52:return 96
break;
case 53:return 49
break;
case 54:return 50
break;
case 55:return 51
break;
case 56:return 68
break;
case 57:return 69
break;
case 58:return 92
break;
case 59:return 91
break;
case 60:return 46
break;
case 61:return 47
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 52
break;
case 65:return 24;
break;
case 66:return 5;
break;
case 67:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}