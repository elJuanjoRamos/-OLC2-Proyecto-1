/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,22],$V2=[1,21],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,26],$V7=[1,28],$V8=[1,29],$V9=[1,27],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[5,23,24,49,72,73,74,75,79,81,82,83,87,88,89,95,97],$Ve=[2,43],$Vf=[1,43],$Vg=[1,42],$Vh=[1,59],$Vi=[1,53],$Vj=[1,48],$Vk=[1,49],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,58],$Vq=[1,64],$Vr=[1,69],$Vs=[1,76],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[25,29,33,37,38,39,41,47,48,54,55,56,57,58,59,60,61,62,63],$Vx=[1,89],$Vy=[1,88],$Vz=[1,97],$VA=[1,98],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,99],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[25,29,33,37,38,39,41,54,55,56,57,58,59,60,61,62,63],$VM=[1,130],$VN=[27,29,31,37,39,41],$VO=[37,41],$VP=[25,29,33,37,38,39,41,54,55,60,61,62,63],$VQ=[5,23,24,49,72,73,74,75,79,80,81,82,83,87,88,89,95,97],$VR=[1,168],$VS=[1,180],$VT=[2,34],$VU=[25,29,31,33,37,38,39,41,45,47,48,54,55,56,57,58,59,60,61,62,63],$VV=[25,29,33,37,38,39,41,54,55,56,57,60,61,62,63],$VW=[25,29,33,37,38,39,41,60,61,62,63],$VX=[25,29,33,37,41,60,61,62,63],$VY=[1,209],$VZ=[1,211],$V_=[1,219],$V$=[33,37,41],$V01=[1,229],$V11=[1,244],$V21=[79,87,88],$V31=[2,125],$V41=[79,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"CONST_DECLARATION":8,"DECLARATION_NOTYPE":9,"BREAK":10,"CONTINUE":11,"RETURN":12,"IF":13,"SWITCH":14,"WHILE":15,"DOWHILE":16,"FOR":17,"CONSOLE":18,"LLAMADA_FUNCION":19,"FUNCIONES":20,"PUSH":21,"POP":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESSION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"ARRAY_CONTENT":40,",":41,"MORE_ARRAY":42,"PRODUCCION_ID":43,"MATRIZ_IDEN":44,".":45,"RESERV_LENGTH":46,"RESERV_PUSH":47,"RESERV_POP":48,"RESERV_CONST":49,"RESERV_STRING":50,"RESERV_NUMBER":51,"RESERV_BOOLEAN":52,"RESERV_ANY":53,"+":54,"-":55,"*":56,"/":57,"%":58,"^":59,"==":60,"!=":61,"&&":62,"||":63,"!":64,"IDENTIFICADOR":65,"CADENA":66,"NUMERO":67,"DECIMAL":68,"RESERV_TRUE":69,"RESERV_FALSE":70,"IDEN_ARRAY":71,"RESERV_BREAK":72,"RESERV_CONTINUE":73,"RESERV_RETURN":74,"RESERV_IF":75,"SENTENCIA":76,"ELIF":77,"{":78,"}":79,"RESERV_ELSE":80,"RESERV_WHILE":81,"RESERV_DO":82,"RESERV_SWITCH":83,"CASES":84,"DEFAULT":85,"CASE":86,"RESERV_CASE":87,"RESERV_DEFAULT":88,"RESERV_FOR":89,"DECLA_FOR":90,"RESERV_VAR":91,"RESERV_IN":92,"RESERV_OF":93,"DECLARACION_FOR":94,"RESERV_CONSOLE":95,"RESERV_LOG":96,"RESERV_FUNCTION":97,"SENTENCIA_FUNCION":98,"PARAMETROS":99,"FUNCIONHIJA":100,"FUNCION_HIJA":101,"OTRA_INSTRUCCION":102,"PARAMETRO":103,"PARAMETROS_LLAMADA":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",41:",",45:".",46:"RESERV_LENGTH",47:"RESERV_PUSH",48:"RESERV_POP",49:"RESERV_CONST",50:"RESERV_STRING",51:"RESERV_NUMBER",52:"RESERV_BOOLEAN",53:"RESERV_ANY",54:"+",55:"-",56:"*",57:"/",58:"%",59:"^",60:"==",61:"!=",62:"&&",63:"||",64:"!",66:"CADENA",67:"NUMERO",68:"DECIMAL",69:"RESERV_TRUE",70:"RESERV_FALSE",72:"RESERV_BREAK",73:"RESERV_CONTINUE",74:"RESERV_RETURN",75:"RESERV_IF",78:"{",79:"}",80:"RESERV_ELSE",81:"RESERV_WHILE",82:"RESERV_DO",83:"RESERV_SWITCH",87:"RESERV_CASE",88:"RESERV_DEFAULT",89:"RESERV_FOR",91:"RESERV_VAR",92:"RESERV_IN",93:"RESERV_OF",95:"RESERV_CONSOLE",96:"RESERV_LOG",97:"RESERV_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[30,2],[32,1],[32,0],[40,3],[40,1],[42,1],[42,3],[43,3],[43,2],[43,3],[43,2],[43,1],[21,6],[22,4],[8,7],[8,5],[9,6],[9,7],[9,4],[26,1],[26,1],[26,1],[26,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[65,3],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[44,4],[44,3],[71,1],[71,1],[10,2],[11,2],[12,2],[12,3],[13,6],[76,3],[76,2],[77,2],[77,2],[77,0],[15,5],[16,7],[14,8],[84,2],[84,1],[86,4],[85,3],[85,0],[17,9],[17,8],[17,8],[17,8],[17,8],[90,1],[90,3],[94,6],[94,4],[94,6],[94,4],[18,7],[20,5],[20,6],[98,3],[98,2],[100,2],[101,5],[101,6],[102,2],[102,0],[99,3],[99,1],[103,3],[19,4],[19,5],[104,3],[104,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 100:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 101:

        this.$ = [$$[$0]]
    
break;
case 4: case 6: case 10: case 12: case 13: case 14: case 15: case 74: case 75:

        this.$ = $$[$0]
    
break;
case 5: case 8: case 9: case 16: case 132:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 7: case 11: case 17: case 18: case 19: case 94: case 95: case 125: case 127:

        this.$ = $$[$0];
    
break;
case 20:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 21:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Arrays($$[$0-8], $$[$0-6], $$[$0-2],  _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 25:

        this.$ = new Arrays($$[$0-4], $$[$0-2], null,  _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new ArrayObject($$[$0-10], $$[$0-8], $$[$0-2],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 27:

        this.$ = new Arrays($$[$0-10], $$[$0-6], $$[$0-3],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 28:

        this.$ = new Arrays($$[$0-6], $$[$0-2], null,  _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 29:

        this.$ = new ArrayObject($$[$0-12], $$[$0-8], $$[$0-2],  _$[$0-13].first_line, _$[$0-13].first_column);
    
break;
case 30:

        this.$ = new Arrays($$[$0-5], 7, $$[$0-2],  _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31:

        this.$ = new ArrayObject($$[$0-7], 7, $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 33: case 110:
 this.$ = $$[$0] 
break;
case 34:
 this.$ = null 
break;
case 35:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2]
    
break;
case 36:

        this.$ = [$$[$0]]
    
    
break;
case 37:

        var cont = new ArrayParam($$[$0], false);
        this.$= cont
    
break;
case 38:

        var cont = new ArrayParam($$[$0-1], true);
        this.$= cont    
    
break;
case 39:
 this.$ = $$[$0-2] + $$[$0-1] 
break;
case 40:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 41:
 this.$= $$[$0-2] 
break;
case 42:
 this.$= $$[$0-1] 
break;
case 43:
 this.$= $$[$0] 
break;
case 44:

        this.$ = new Pushs($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 45:

        this.$ = new Pop($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
    
break;
case 46:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 47:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 48:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 49:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 50:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 51:

        this.$ = 1;
    
break;
case 52:
 
        this.$ = 0;
    
break;
case 53:
 
        this.$ = 2;
    
break;
case 54:
 
        this.$ = 7;
    
break;
case 55:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 62:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 63:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 66:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 67:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 70:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 71:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 72:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 76: case 120: case 121: case 124:

        this.$ = $$[$0-1];
    
break;
case 77:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 78: case 79:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 80: case 81:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 82:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 83:
 
        this.$ = $$[$0-3] + '[' + $$[$0-1] + ']'
    
break;
case 84:
 
        this.$ = '[' + $$[$0-1] + ']'
    
break;
case 85: case 86:
 
        this.$ = $$[$0]
    
break;
case 87:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 88: case 89:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 90:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 91:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 92:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 93: case 96: case 104:

        this.$ = null;
    
break;
case 97:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 98:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 99:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 102:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 103:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 105:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 106: case 107:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FORIN(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 108: case 109:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FOROF(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 111:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 112:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 113:

        this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 114:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 115:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 116:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 117: case 122:

        this.$ = $$[$0-4];
    
break;
case 118: case 123:

        this.$ = $$[$0-5];
    
break;
case 119: case 126: case 128:

        this.$ = $$[$0-2];
    
break;
case 129:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 130:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 131:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),o($Vd,[2,18]),o($Vd,[2,19]),{24:[1,36]},{24:[1,37]},o([47,48],$Ve,{44:41,25:[1,38],27:[1,39],31:$Vf,36:[1,40],45:$Vg}),{29:[1,44]},{29:[1,45]},{22:50,24:$Vh,28:47,29:[1,46],36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{36:[1,60]},{36:[1,61]},{36:[1,62]},{76:63,78:$Vq},{36:[1,65]},{45:[1,66]},{24:[1,67]},{47:[1,68],48:$Vr},{1:[2,1]},o($Vd,[2,2]),{25:[1,70],27:[1,71],29:[1,72]},{25:[1,73],27:[1,74]},{26:75,50:$Vs,51:$Vt,52:$Vu,53:$Vv},{22:50,24:$Vh,28:80,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:83,36:$Vi,37:[1,81],43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp,104:82},o($Vw,[2,40],{31:[1,85],45:[1,84]}),o($Vw,[2,42],{46:[1,86]}),{24:$Vx,67:$Vy,71:87},o($Vd,[2,87]),o($Vd,[2,88]),o($Vd,[2,89]),{29:[1,90],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{22:50,24:$Vh,28:103,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:104,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VL,[2,74]),o($VL,[2,75]),o($VL,[2,82],{48:$Vr}),{22:50,24:$Vh,28:105,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VL,[2,77]),o($VL,[2,78]),o($VL,[2,79]),o($VL,[2,80]),o($VL,[2,81]),o([25,29,33,37,38,39,41,48,54,55,56,57,58,59,60,61,62,63],$Ve,{44:41,31:$Vf,45:$Vg}),{22:50,24:$Vh,28:106,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:107,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:108,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{81:[1,109]},{4:110,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,79:[1,111],81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},{23:[1,114],24:[1,116],90:112,91:[1,113],94:115},{96:[1,117]},{36:[1,118]},{36:[1,119]},{36:[1,120]},{26:121,35:[1,122],50:$Vs,51:$Vt,52:$Vu,53:$Vv},{22:50,24:$Vh,28:123,31:[1,124],34:[1,125],36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($Vd,[2,23]),{26:126,50:$Vs,51:$Vt,52:$Vu,53:$Vv},{22:50,24:$Vh,28:127,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{27:[1,128],30:129,31:$VM},o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,53]),o($VN,[2,54]),{29:[1,131],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{29:[1,132]},{37:[1,133],41:[1,134]},o($VO,[2,132],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK}),o($Vw,[2,39]),{24:$Vx,67:$Vy,71:135},o($Vw,[2,41]),{33:[1,136]},{33:[2,85]},{33:[2,86]},o($Vd,[2,90]),{22:50,24:$Vh,28:137,36:$Vi,43:52,54:[1,138],55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:139,36:$Vi,43:52,55:[1,140],64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:141,36:$Vi,43:52,55:$Vj,56:[1,142],64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:143,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:144,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:145,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,27:[1,147],28:146,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,27:[1,149],28:148,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:150,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:151,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:152,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:153,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VP,[2,62],{56:$VD,57:$VE,58:$VF,59:$VG}),o($VL,[2,71]),{37:[1,154],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{37:[1,155],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{37:[1,156],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{37:[1,157],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{36:[1,158]},{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,79:[1,159],81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},o($VQ,[2,93]),{29:[1,160]},{24:[1,161]},{24:[1,162]},{29:[2,110]},{27:[1,163]},{36:[1,164]},{24:$VR,37:[1,165],99:166,103:167},{22:50,24:$Vh,28:169,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{37:[1,170]},{27:[1,171],29:[1,172],30:173,31:$VM},{38:[1,174]},{29:[1,175],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{22:50,24:$Vh,28:179,31:$VS,32:176,33:$VT,36:$Vi,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{35:[1,181]},{27:[1,182]},{29:[1,183],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{22:50,24:$Vh,28:184,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{27:[1,185]},{33:[1,186]},o($Vd,[2,50]),o($Vd,[2,129]),{29:[1,187]},{22:50,24:$Vh,28:188,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{33:[1,189]},o($VU,[2,84]),o($VP,[2,55],{56:$VD,57:$VE,58:$VF,59:$VG}),o($VL,[2,72]),o($VP,[2,56],{56:$VD,57:$VE,58:$VF,59:$VG}),o($VL,[2,73],{22:50,65:51,43:52,28:103,24:$Vh,36:$Vi,64:$Vk,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp}),o($VV,[2,57],{58:$VF,59:$VG}),{22:50,24:$Vh,28:190,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VV,[2,58],{58:$VF,59:$VG}),o($VL,[2,59]),o($VL,[2,60]),o($VW,[2,63],{54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),{22:50,24:$Vh,28:191,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VW,[2,64],{54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),{22:50,24:$Vh,28:192,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VX,[2,67],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o($VX,[2,68],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o([25,29,33,37,41,62,63],[2,69],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o([25,29,33,37,41,63],[2,70],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ}),o($VL,[2,76]),{76:193,78:$Vq},{78:[1,194]},{76:195,78:$Vq},{22:50,24:$Vh,28:196,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($VQ,[2,92]),{22:50,24:$Vh,28:197,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{25:[1,200],27:[1,201],92:[1,198],93:[1,199]},{25:[1,204],27:[1,205],92:[1,202],93:[1,203]},{22:50,24:$Vh,28:206,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:207,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{78:$VY,98:208},{37:[1,210],41:$VZ},o($VO,[2,127]),{25:[1,212]},{37:[1,213],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o([5,23,24,25,29,33,37,38,39,41,49,54,55,56,57,58,59,60,61,62,63,72,73,74,75,79,81,82,83,87,88,89,95,97],[2,45]),{22:50,24:$Vh,28:214,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($Vd,[2,21]),{27:[1,215],29:[1,216]},{26:217,50:$Vs,51:$Vt,52:$Vu,53:$Vv},o($Vd,[2,22]),{33:[1,218]},o([33,37],[2,33],{41:$V_}),o($V$,[2,36]),o($V$,[2,37],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK}),{22:50,24:$Vh,28:179,31:$VS,36:$Vi,40:220,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{36:[1,221]},{22:50,24:$Vh,28:222,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($Vd,[2,47]),{29:[1,223],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{22:50,24:$Vh,28:224,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o([27,29],[2,32]),o($Vd,[2,130]),o($VO,[2,131],{38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK}),o($VU,[2,83]),o($VV,[2,61],{58:$VF,59:$VG}),o($VW,[2,65],{54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o($VW,[2,66],{54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG}),o($Vd,[2,96],{77:225,80:[1,226]}),{84:227,86:228,87:$V01},o($Vd,[2,97]),{37:[1,230],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{29:[1,231],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{24:[1,232]},{24:[1,233]},{26:234,50:$Vs,51:$Vt,52:$Vu,53:$Vv},{22:50,24:$Vh,28:235,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{24:[1,236]},{24:[1,237]},{26:238,50:$Vs,51:$Vt,52:$Vu,53:$Vv},{22:50,24:$Vh,28:239,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{29:[2,111],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{37:[1,240],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o($Vd,[2,117]),{79:[1,242],97:$V11,100:241,101:243},{78:$VY,98:245},{24:$VR,103:246},{26:247,50:$Vs,51:$Vt,52:$Vu,53:$Vv},{29:[1,248]},{29:[1,249],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{31:[1,250],34:[1,251]},o($Vd,[2,25]),{39:[1,252]},{29:[1,253]},{22:50,24:$Vh,28:179,31:$VS,36:$Vi,42:254,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{33:[1,255],41:$V_},{22:50,24:$Vh,28:179,31:$VS,32:256,36:$Vi,37:$VT,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{29:[1,257],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o($Vd,[2,48]),{29:[1,258],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o($Vd,[2,91]),{13:260,75:$V6,76:259,78:$Vq},{79:[2,104],85:261,86:262,87:$V01,88:[1,263]},o($V21,[2,101]),{22:50,24:$Vh,28:264,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{29:[1,265]},{22:50,24:$Vh,28:266,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{37:[1,267]},{37:[1,268]},{27:[1,269]},{29:[2,113],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{37:[1,270]},{37:[1,271]},{27:[1,272]},{29:[2,115],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{29:[1,273]},{79:[1,274]},o($Vd,[2,120]),{79:$V31,97:$V11,101:276,102:275},{24:[1,277]},o($Vd,[2,118]),o($VO,[2,126]),o($VO,[2,128]),o($Vd,[2,44]),o($Vd,[2,20]),{22:50,24:$Vh,28:179,31:$VS,32:278,33:$VT,36:$Vi,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{35:[1,279]},{27:[1,280],29:[1,281]},o($Vd,[2,30]),o($V$,[2,35]),o($V$,[2,38]),{37:[1,282]},o($Vd,[2,46]),o($Vd,[2,49]),o($Vd,[2,94]),o($Vd,[2,95]),{79:[1,283]},o($V21,[2,100]),{25:[1,284]},{25:[1,285],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o($Vd,[2,98]),{37:[1,286],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{76:287,78:$Vq},{76:288,78:$Vq},{22:50,24:$Vh,28:289,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{76:290,78:$Vq},{76:291,78:$Vq},{22:50,24:$Vh,28:292,36:$Vi,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($Vd,[2,116]),o($Vd,[2,119]),{79:[2,121]},{79:$V31,97:$V11,101:276,102:293},{36:[1,294]},{33:[1,295]},{36:[1,296]},{31:[1,297],34:[1,298]},o($Vd,[2,28]),{29:[1,299]},o($Vd,[2,99]),{4:300,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},{4:301,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},{76:302,78:$Vq},o($Vd,[2,106]),o($Vd,[2,108]),{29:[2,112],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},o($Vd,[2,107]),o($Vd,[2,109]),{29:[2,114],38:$Vz,39:$VA,54:$VB,55:$VC,56:$VD,57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,62:$VJ,63:$VK},{79:[2,124]},{24:$VR,37:[1,303],99:304,103:167},{29:[1,305]},{22:50,24:$Vh,28:179,31:$VS,32:306,36:$Vi,37:$VT,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{22:50,24:$Vh,28:179,31:$VS,32:307,33:$VT,36:$Vi,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},{35:[1,308]},o($Vd,[2,31]),{6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,43:33,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,79:[2,103],81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc},o($V21,[2,102],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,43:33,6:35,23:$V0,24:$V1,49:$V2,72:$V3,73:$V4,74:$V5,75:$V6,81:$V7,82:$V8,83:$V9,89:$Va,95:$Vb,97:$Vc}),o($Vd,[2,105]),{78:$VY,98:309},{37:[1,310],41:$VZ},o($Vd,[2,24]),{37:[1,311]},{33:[1,312]},{36:[1,313]},o($V41,[2,122]),{78:$VY,98:314},{29:[1,315]},{29:[1,316]},{22:50,24:$Vh,28:179,31:$VS,32:317,36:$Vi,37:$VT,40:177,42:178,43:52,55:$Vj,64:$Vk,65:51,66:$Vl,67:$Vm,68:$Vn,69:$Vo,70:$Vp},o($V41,[2,123]),o($Vd,[2,26]),o($Vd,[2,27]),{37:[1,318]},{29:[1,319]},o($Vd,[2,29])],
defaultActions: {34:[2,1],88:[2,85],89:[2,86],115:[2,110],275:[2,121],293:[2,124]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/type');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { FORIN } = require('../tools/sentences/ForIn');
    const { FOROF } = require('../tools/sentences/ForOf');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');
    const { Arrays } = require('../tools/declaration_type/Arrays');
    const { ArrayObject } = require('../tools/declaration_type/ArrayObject');
    const { ArrayParam } = require('../tools/model/ArrayParam');
    const { Pushs } = require('../tools/sentences/Push');
    const { Pop } = require('../tools/sentences/Pop');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 68
break;
case 4:return 67
break;
case 5:return 66
break;
case 6:return 66
break;
case 7:return 66
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 55
break;
case 11:return 54
break;
case 12:return 58
break;
case 13:return 59
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 41
break;
case 17:return 45
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 60
break;
case 23:return 61
break;
case 24:return 63
break;
case 25:return 62
break;
case 26:return 64
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 78
break;
case 31:return 79
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 79
break;
case 35:return 79
break;
case 36:return 23
break;
case 37:return 91
break;
case 38:return 49
break;
case 39:return 75
break;
case 40:return 80
break;
case 41:return 83
break;
case 42:return 88
break;
case 43:return 87
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 89
break;
case 47:return 95
break;
case 48:return 96
break;
case 49:return 72
break;
case 50:return 73
break;
case 51:return 74
break;
case 52:return 97
break;
case 53:return 50
break;
case 54:return 51
break;
case 55:return 52
break;
case 56:return 69
break;
case 57:return 70
break;
case 58:return 93
break;
case 59:return 92
break;
case 60:return 47
break;
case 61:return 48
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 53
break;
case 65:return 46
break;
case 66:return 24;
break;
case 67:return 5;
break;
case 68:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:length\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}