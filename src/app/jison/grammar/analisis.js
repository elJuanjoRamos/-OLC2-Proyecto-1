/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,22],$V2=[1,20],$V3=[1,21],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,28],$V9=[1,29],$Va=[1,27],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[5,22,23,30,31,58,59,60,61,65,67,68,69,73,74,75,81,84],$Vf=[1,53],$Vg=[1,45],$Vh=[1,47],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,58],$Vo=[1,66],$Vp=[1,74],$Vq=[1,75],$Vr=[1,76],$Vs=[1,82],$Vt=[1,83],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[24,28,37,38,39,40,41,42,43,44,45,46,47,48,52,90],$VF=[26,28,35,52,90],$VG=[52,90],$VH=[5,22,23,30,31,58,59,60,61,65,66,67,68,69,73,74,75,81,84],$VI=[1,157],$VJ=[26,28],$VK=[24,28,37,38,43,44,45,46,47,48,52,90],$VL=[24,28,37,38,39,40,43,44,45,46,47,48,52,90],$VM=[24,28,43,44,45,46,47,48,52,90],$VN=[24,28,45,46,47,48,52,90],$VO=[1,185],$VP=[1,186],$VQ=[1,194],$VR=[1,196],$VS=[1,214],$VT=[1,228],$VU=[65,73,74],$VV=[2,108],$VW=[65,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"DECLARACION_LET":8,"DECLARACION_CONST":9,"DECLARACION_SIN_TIPO":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"FUNCIONES":21,"PR_VAR":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARREGLO":29,"PR_LET":30,"PR_CONST":31,"PR_STRING":32,"PR_NUMBER":33,"PR_BOOLEAN":34,"[":35,"]":36,"+":37,"-":38,"*":39,"/":40,"%":41,"^":42,"<":43,">":44,"==":45,"!=":46,"&&":47,"||":48,"!":49,"IDENTIFICADOR":50,"(":51,")":52,"CADENA":53,"NUMERO":54,"DECIMAL":55,"PR_TRUE":56,"PR_FALSE":57,"PR_BREAK":58,"PR_CONTINUE":59,"PR_RETURN":60,"PR_IF":61,"SENTENCIA":62,"ELSEIF":63,"{":64,"}":65,"PR_ELSE":66,"PR_WHILE":67,"PR_DO":68,"PR_SWITCH":69,"CASES":70,"DEFAULT":71,"CASE":72,"PR_CASE":73,"PR_DEFAULT":74,"PR_FOR":75,"FOREXP":76,"TIPOFOR":77,"DECLARACION_FOR":78,"PR_OF":79,"PR_IN":80,"PR_CONSOLE":81,".":82,"PR_LOG":83,"PR_FUNCTION":84,"SENTENCIA_FUNCION":85,"PARAMETROS":86,"FUNCIONHIJA":87,"FUNCION_HIJA":88,"OTRA_INSTRUCCION":89,",":90,"PARAMETRO":91,"PARAMETROS_LLAMADA":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"PR_VAR",23:"ID",24:":",26:"=",28:";",30:"PR_LET",31:"PR_CONST",32:"PR_STRING",33:"PR_NUMBER",34:"PR_BOOLEAN",35:"[",36:"]",37:"+",38:"-",39:"*",40:"/",41:"%",42:"^",43:"<",44:">",45:"==",46:"!=",47:"&&",48:"||",49:"!",51:"(",52:")",53:"CADENA",54:"NUMERO",55:"DECIMAL",56:"PR_TRUE",57:"PR_FALSE",58:"PR_BREAK",59:"PR_CONTINUE",60:"PR_RETURN",61:"PR_IF",64:"{",65:"}",66:"PR_ELSE",67:"PR_WHILE",68:"PR_DO",69:"PR_SWITCH",73:"PR_CASE",74:"PR_DEFAULT",75:"PR_FOR",79:"PR_OF",80:"PR_IN",81:"PR_CONSOLE",82:".",83:"PR_LOG",84:"PR_FUNCTION",90:","},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,8],[7,6],[7,6],[7,4],[8,7],[8,5],[8,5],[8,3],[8,8],[8,6],[8,6],[8,4],[9,7],[9,5],[10,6],[10,7],[10,4],[25,1],[25,1],[25,1],[29,2],[29,4],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[50,3],[50,1],[50,1],[50,1],[50,1],[50,1],[50,1],[11,2],[12,2],[13,2],[13,3],[14,6],[62,3],[62,2],[63,2],[63,2],[63,0],[16,5],[17,7],[15,8],[70,2],[70,1],[72,4],[71,3],[71,0],[18,5],[76,4],[76,4],[76,4],[76,5],[77,1],[77,1],[78,6],[78,4],[78,6],[78,4],[19,7],[21,5],[21,6],[85,3],[85,2],[87,2],[88,5],[88,6],[89,2],[89,0],[86,3],[86,1],[91,3],[20,4],[20,5],[92,3],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3:

        this.$ = [$$[$0]]
    
break;
case 4: case 7: case 13: case 14: case 16: case 62:

        this.$ = $$[$0]
    
break;
case 5: case 6: case 8: case 9: case 10: case 11: case 12: case 15: case 17: case 84: case 115:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 18: case 108: case 110:

        this.$ = $$[$0];
    
break;
case 19:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 20:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 21:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 23: case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 24: case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 25: case 33: case 37:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 26: case 34: case 90: case 91:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 27: case 35:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 28: case 29: case 36:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 38:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 39:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 40:

        this.$ = 1;
    
break;
case 41:
 
        this.$ = 0;
    
break;
case 42:
 
        this.$ = 2;
    
break;
case 43: case 70: case 71: case 72:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 44:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 45:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 46:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 47:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 48:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 54:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 55:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 56:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 60:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63: case 76: case 103: case 104: case 107:

        this.$ = $$[$0-1];
    
break;
case 64:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 65: case 66:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 67: case 68:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 69:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 73:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 74:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 75:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 77: case 78:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 79: case 87:

        this.$ = null;
    
break;
case 80:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 81:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 82:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 83:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 85:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 86:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 88:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 89:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 92:

        this.$ = {node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 93:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 94:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 95: case 97:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 96: case 98:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 99:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 100: case 105:

        this.$ = $$[$0-4];
    
break;
case 101: case 106:

        this.$ = $$[$0-5];
    
break;
case 102: case 109: case 111:

        this.$ = $$[$0-2];
    
break;
case 112:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 113:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 114:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},{1:[3]},{5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),{23:[1,35]},{23:[1,36]},{23:[1,37]},{24:[1,38],26:[1,39],51:[1,40]},{28:[1,41]},{28:[1,42]},{23:$Vf,27:44,28:[1,43],49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{51:[1,54]},{51:[1,55]},{51:[1,56]},{62:57,64:$Vn},{51:[1,59]},{82:[1,60]},{23:[1,61]},{1:[2,1]},o($Ve,[2,2]),{24:[1,62],26:[1,63],28:[1,64],29:65,35:$Vo},{24:[1,67],26:[1,68],28:[1,69],29:70,35:$Vo},{24:[1,71],26:[1,72]},{25:73,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:77,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:80,49:$Vg,50:46,51:$Vh,52:[1,78],53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm,92:79},o($Ve,[2,70]),o($Ve,[2,71]),o($Ve,[2,72]),{28:[1,81],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:94,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VE,[2,62]),{23:$Vf,27:95,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VE,[2,64]),o($VE,[2,65]),o($VE,[2,66]),o($VE,[2,67]),o($VE,[2,68]),o($VE,[2,69]),{23:$Vf,27:96,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:97,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:98,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{67:[1,99]},{4:100,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,65:[1,101],67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},{22:[1,104],30:[1,103],31:[1,105],76:102,78:106},{83:[1,107]},{51:[1,108]},{25:109,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:110,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,22]),{26:[1,111],28:[1,112]},{36:[1,113]},{25:114,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:115,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,30]),{26:[1,116],28:[1,117]},{25:118,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:119,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{26:[1,120],29:121,35:$Vo},o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),{28:[1,122],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{28:[1,123]},{52:[1,124],90:[1,125]},o($VG,[2,115],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Ve,[2,73]),{23:$Vf,27:126,37:[1,127],49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:128,38:[1,129],49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:130,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:131,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:132,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:133,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,26:[1,135],27:134,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,26:[1,137],27:136,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:138,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:139,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:140,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:141,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VE,[2,59]),{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,142]},{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,143]},{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,144]},{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,145]},{51:[1,146]},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,65:[1,147],67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},o($VH,[2,76]),{52:[1,148]},{23:[1,149]},{23:[1,150]},{23:[1,151]},{28:[1,152]},{51:[1,153]},{23:$VI,52:[1,154],86:155,91:156},{26:[1,158],28:[1,159],29:160,35:$Vo},{28:[1,161],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:162,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,26]),o($VJ,[2,43],{35:[1,163]}),{26:[1,164],28:[1,165],29:166,35:$Vo},{28:[1,167],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:168,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,34]),{26:[1,169]},{28:[1,170],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:171,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{26:[1,172]},o($Ve,[2,39]),o($Ve,[2,112]),{28:[1,173]},{23:$Vf,27:174,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VK,[2,45],{39:$Vu,40:$Vv,41:$Vw,42:$Vx}),o($VE,[2,60]),o($VK,[2,46],{39:$Vu,40:$Vv,41:$Vw,42:$Vx}),o($VE,[2,61]),o($VL,[2,47],{41:$Vw,42:$Vx}),o($VL,[2,48],{41:$Vw,42:$Vx}),o($VE,[2,49]),o($VE,[2,50]),o($VM,[2,51],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx}),{23:$Vf,27:175,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VM,[2,52],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx}),{23:$Vf,27:176,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VN,[2,55],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz}),o($VN,[2,56],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz}),o([24,28,47,48,52,90],[2,57],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB}),o([24,28,48,52,90],[2,58],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC}),o($VE,[2,63]),{62:177,64:$Vn},{64:[1,178]},{62:179,64:$Vn},{23:$Vf,27:180,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($VH,[2,75]),{62:181,64:$Vn},{24:[1,183],26:[1,184],77:182,79:$VO,80:$VP},{24:[1,188],26:[1,189],77:187,79:$VO,80:$VP},{77:190,79:$VO,80:$VP},{23:$Vf,27:191,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:192,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{64:$VQ,85:193},{52:[1,195],90:$VR},o($VG,[2,110]),{24:[1,197]},{23:$Vf,27:198,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,20]),{26:[1,199],28:[1,200]},o($Ve,[2,21]),{28:[1,201],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{36:[1,202]},{23:$Vf,27:203,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,28]),{26:[1,204],28:[1,205]},o($Ve,[2,29]),{28:[1,206],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:207,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,36]),{28:[1,208],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:209,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,113]),o($VG,[2,114],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VM,[2,53],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx}),o($VM,[2,54],{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx}),o($Ve,[2,79],{63:210,66:[1,211]}),{70:212,72:213,73:$VS},o($Ve,[2,80]),{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,215]},o($Ve,[2,88]),{23:[1,216]},{25:217,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:218,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:[2,93]},{23:[2,94]},{23:[1,219]},{25:220,32:$Vp,33:$Vq,34:$Vr},{23:$Vf,27:221,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:[1,222]},{28:[1,223],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[1,224]},o($Ve,[2,100]),{65:[1,226],84:$VT,87:225,88:227},{64:$VQ,85:229},{23:$VI,91:230},{25:231,32:$Vp,33:$Vq,34:$Vr},{28:[1,232],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:233,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,24]),o($Ve,[2,25]),o($VJ,[2,44]),{28:[1,234],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{23:$Vf,27:235,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},o($Ve,[2,32]),o($Ve,[2,33]),{28:[1,236],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Ve,[2,37]),{28:[1,237],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Ve,[2,74]),{14:239,61:$V7,62:238,64:$Vn},{65:[2,87],71:240,72:241,73:$VS,74:[1,242]},o($VU,[2,84]),{23:$Vf,27:243,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{28:[1,244]},{52:[2,89]},{26:[1,245]},{28:[2,98],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{52:[2,90]},{26:[1,246]},{28:[2,96],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{52:[2,91]},{23:$Vf,27:247,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{28:[1,248]},{65:[1,249]},o($Ve,[2,103]),{65:$VV,84:$VT,88:251,89:250},{23:[1,252]},o($Ve,[2,101]),o($VG,[2,109]),o($VG,[2,111]),o($Ve,[2,19]),{28:[1,253],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Ve,[2,27]),{28:[1,254],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Ve,[2,35]),o($Ve,[2,38]),o($Ve,[2,77]),o($Ve,[2,78]),{65:[1,255]},o($VU,[2,83]),{24:[1,256]},{24:[1,257],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},o($Ve,[2,81]),{23:$Vf,27:258,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{23:$Vf,27:259,49:$Vg,50:46,51:$Vh,53:$Vi,54:$Vj,55:$Vk,56:$Vl,57:$Vm},{37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD,52:[2,92]},o($Ve,[2,99]),o($Ve,[2,102]),{65:[2,104]},{65:$VV,84:$VT,88:251,89:260},{51:[1,261]},o($Ve,[2,23]),o($Ve,[2,31]),o($Ve,[2,82]),{4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},{4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},{28:[2,97],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{28:[2,95],37:$Vs,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx,43:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD},{65:[2,107]},{23:$VI,52:[1,264],86:265,91:156},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,65:[2,86],67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd},o($VU,[2,85],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,6:34,22:$V0,23:$V1,30:$V2,31:$V3,58:$V4,59:$V5,60:$V6,61:$V7,67:$V8,68:$V9,69:$Va,75:$Vb,81:$Vc,84:$Vd}),{64:$VQ,85:266},{52:[1,267],90:$VR},o($VW,[2,105]),{64:$VQ,85:268},o($VW,[2,106])],
defaultActions: {33:[2,1],185:[2,93],186:[2,94],216:[2,89],219:[2,90],222:[2,91],250:[2,104],260:[2,107]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/type');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { Sentence } = require('../tools/sentences/Sentence');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 55
break;
case 4:return 54
break;
case 5:return 53
break;
case 6:return 53
break;
case 7:return 53
break;
case 8:return 39
break;
case 9:return 40
break;
case 10:return 38
break;
case 11:return 37
break;
case 12:return 41
break;
case 13:return 42
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 90
break;
case 17:return 82
break;
case 18:return 43
break;
case 19:return 44
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 45
break;
case 23:return 46
break;
case 24:return 48
break;
case 25:return 47
break;
case 26:return 49
break;
case 27:return 26
break;
case 28:return 51
break;
case 29:return 52 
break;
case 30:return 64
break;
case 31:return 65
break;
case 32:return 35
break;
case 33:return 36
break;
case 34:return 65
break;
case 35:return 65
break;
case 36:return 30
break;
case 37:return 22
break;
case 38:return 31
break;
case 39:return 61
break;
case 40:return 66
break;
case 41:return 69
break;
case 42:return 74
break;
case 43:return 73
break;
case 44:return 67
break;
case 45:return 68
break;
case 46:return 75
break;
case 47:return 81
break;
case 48:return 83
break;
case 49:return 58
break;
case 50:return 59
break;
case 51:return 60
break;
case 52:return 84
break;
case 53:return 32
break;
case 54:return 33
break;
case 55:return 34
break;
case 56:return 56
break;
case 57:return 57
break;
case 58:return 79
break;
case 59:return 80
break;
case 60:return 23;
break;
case 61:return 5;
break;
case 62:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([-]?[0-9]+(\.[0-9]+))))/i,/^(?:(([-]?[0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    //var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    //return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}