/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,22],$V2=[1,41],$V3=[1,21],$V4=[1,36],$V5=[1,37],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,47],$Vg=[1,30],$Vh=[1,31],$Vi=[1,29],$Vj=[1,32],$Vk=[1,33],$Vl=[1,24],$Vm=[1,34],$Vn=[5,23,24,36,50,56,65,68,69,70,71,72,74,75,76,77,80,81,83,84,85,89,90,91,97,101,105],$Vo=[29,38,39,47,49,55,56,57,58,59,60,61,62,63,64],$Vp=[2,44],$Vq=[1,57],$Vr=[1,65],$Vs=[1,66],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,77],$VE=[1,82],$VF=[2,87],$VG=[1,87],$VH=[25,29,33,37,38,39,41,55,56,57,58,59,60,61,62,63,64,81],$VI=[1,93],$VJ=[1,104],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[2,43],$VP=[1,107],$VQ=[25,29,33,37,38,39,41,47,49,55,56,57,58,59,60,61,62,63,64,81],$VR=[1,115],$VS=[1,114],$VT=[25,29,33,37,38,39,41,49,55,56,57,58,59,60,61,62,63,64,81],$VU=[25,29,33,37,38,39,41,55,56,61,62,63,64,81],$VV=[41,81],$VW=[1,164],$VX=[27,29,31,37,39,41],$VY=[2,42],$VZ=[37,41],$V_=[25,29,33,37,38,39,41,55,56,57,58,61,62,63,64,81],$V$=[25,29,33,37,38,39,41,61,62,63,64,81],$V01=[25,29,33,37,41,61,62,63,64,81],$V11=[5,23,24,36,50,56,65,68,69,70,71,72,74,75,76,77,80,81,82,83,84,85,89,90,91,97,101,105],$V21=[1,190],$V31=[1,204],$V41=[2,34],$V51=[25,29,31,33,37,38,39,41,45,47,49,55,56,57,58,59,60,61,62,63,64,81],$V61=[1,217],$V71=[1,243],$V81=[33,37,41],$V91=[1,257],$Va1=[81,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"CONST_DECLARATION":8,"DECLARATION_NOTYPE":9,"TYPE_DECLARATION":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"CALL_FUNCTION":20,"FUNCTIONS":21,"PUSH":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESSION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"ARRAY_CONTENT":40,",":41,"MORE_ARRAY":42,"PRODUCCION_ID":43,"MATRIZ_IDEN":44,".":45,"RESERV_LENGTH":46,"RESERV_PUSH":47,"POP":48,"RESERV_POP":49,"RESERV_CONST":50,"RESERV_STRING":51,"RESERV_NUMBER":52,"RESERV_BOOLEAN":53,"RESERV_ANY":54,"+":55,"-":56,"*":57,"/":58,"%":59,"^":60,"==":61,"!=":62,"&&":63,"||":64,"!":65,"IDENTIFICADOR":66,"JSON_EXPRESSION":67,"CADENA":68,"NUMERO":69,"DECIMAL":70,"RESERV_TRUE":71,"RESERV_FALSE":72,"IDEN_ARRAY":73,"RESERV_BREAK":74,"RESERV_CONTINUE":75,"RESERV_RETURN":76,"RESERV_IF":77,"SENTENCIA":78,"ELIF":79,"{":80,"}":81,"RESERV_ELSE":82,"RESERV_WHILE":83,"RESERV_DO":84,"RESERV_SWITCH":85,"CASES":86,"DEFAULT":87,"CASE":88,"RESERV_CASE":89,"RESERV_DEFAULT":90,"RESERV_FOR":91,"DECLA_FOR":92,"RESERV_VAR":93,"RESERV_IN":94,"RESERV_OF":95,"DECLARACION_FOR":96,"RESERV_CONSOLE":97,"RESERV_LOG":98,"OBJECTS":99,"OBJECT":100,"RESERV_TYPE":101,"PRIMITIVE_DATAS":102,"PRIMITIVE_DATA":103,"TYPE_TIPO":104,"RESERV_FUNCTION":105,"PATAMETERS":106,"FUNCTION_SENTENCE":107,"CHILDFUNCTION":108,"CHILD_FUNCTION":109,"NEW_INSTRUCTION":110,"PR_FUNCTION":111,"PARAMETROS":112,"PARAMS":113,"CALL_PARAMS":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",41:",",45:".",46:"RESERV_LENGTH",47:"RESERV_PUSH",49:"RESERV_POP",50:"RESERV_CONST",51:"RESERV_STRING",52:"RESERV_NUMBER",53:"RESERV_BOOLEAN",54:"RESERV_ANY",55:"+",56:"-",57:"*",58:"/",59:"%",60:"^",61:"==",62:"!=",63:"&&",64:"||",65:"!",68:"CADENA",69:"NUMERO",70:"DECIMAL",71:"RESERV_TRUE",72:"RESERV_FALSE",74:"RESERV_BREAK",75:"RESERV_CONTINUE",76:"RESERV_RETURN",77:"RESERV_IF",80:"{",81:"}",82:"RESERV_ELSE",83:"RESERV_WHILE",84:"RESERV_DO",85:"RESERV_SWITCH",89:"RESERV_CASE",90:"RESERV_DEFAULT",91:"RESERV_FOR",93:"RESERV_VAR",94:"RESERV_IN",95:"RESERV_OF",97:"RESERV_CONSOLE",98:"RESERV_LOG",101:"RESERV_TYPE",105:"RESERV_FUNCTION",111:"PR_FUNCTION",112:"PARAMETROS"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[30,2],[32,1],[32,0],[40,3],[40,1],[42,1],[42,3],[43,3],[43,2],[43,3],[43,3],[43,2],[43,1],[22,6],[48,4],[8,7],[8,5],[9,6],[9,7],[9,4],[9,6],[9,2],[26,1],[26,1],[26,1],[26,1],[26,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[28,1],[66,3],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[44,4],[44,3],[73,1],[73,1],[11,2],[12,2],[13,3],[13,2],[14,6],[78,3],[78,2],[79,2],[79,2],[79,0],[16,5],[17,7],[15,8],[86,2],[86,1],[88,4],[87,3],[87,0],[18,9],[18,8],[18,8],[18,8],[18,8],[92,1],[92,3],[96,6],[96,4],[96,6],[96,4],[19,7],[67,3],[99,3],[99,1],[100,3],[10,7],[102,3],[102,1],[103,3],[104,1],[104,1],[104,1],[104,1],[21,6],[21,5],[107,3],[107,2],[108,2],[109,5],[109,6],[110,2],[110,0],[106,3],[106,1],[113,3],[20,4],[20,5],[114,3],[114,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 105:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 106: case 124: case 149:

        this.$ = [$$[$0]]
    
break;
case 4: case 5: case 6: case 7: case 9: case 10: case 11: case 13: case 14: case 15: case 16: case 78: case 79: case 80:

        this.$ = $$[$0]
    
break;
case 8: case 12: case 17: case 18: case 19: case 99: case 100: case 131: case 142:

        this.$ = $$[$0];
    
break;
case 20:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 21:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 24:

        this.$ = new Arrays($$[$0-8], $$[$0-6], $$[$0-2],  _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 25:

        this.$ = new Arrays($$[$0-4], $$[$0-2], null,  _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$ = new ArrayObject($$[$0-10], $$[$0-8], $$[$0-2],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 27:

        this.$ = new Arrays($$[$0-10], $$[$0-6], $$[$0-3],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 28:

        this.$ = new Arrays($$[$0-6], $$[$0-2], null,  _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 29:

        this.$ = new ArrayObject($$[$0-12], $$[$0-8], $$[$0-2],  _$[$0-13].first_line, _$[$0-13].first_column);
    
break;
case 30:

        this.$ = new Arrays($$[$0-5], 7, $$[$0-2],  _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31:

        this.$ = new ArrayObject($$[$0-7], 7, $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 32:
  
break;
case 33: case 115:
 this.$ = $$[$0] 
break;
case 34:
 this.$ = null 
break;
case 35:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2]
    
break;
case 36:

        this.$ = [$$[$0]]
    
    
break;
case 37:

        var cont = new ArrayParam($$[$0], false);
        this.$= cont
    
break;
case 38:

        var cont = new ArrayParam($$[$0-1], true);
        this.$= cont    
    
break;
case 39:
 this.$ = $$[$0-2] + $$[$0-1] 
break;
case 40:
 this.$ = $$[$0-1] + $$[$0] 
break;
case 41:
 this.$= $$[$0-2] 
break;
case 42:
 this.$ = new TypeAccess($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$= $$[$0-1] 
break;
case 44:
 this.$= $$[$0] 
break;
case 45:

        this.$ = new Pushs($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 46:

        this.$ = new Pop($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
    
break;
case 47:

        this.$ = new Constant($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 48:

        this.$ = new Constant($$[$0-3], 7, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 49:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 50:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 51:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 52:

        this.$ = new TypeNoType($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 53:

        this.$ = $$[$0-1]
    
break;
case 54:

        this.$ = 1;
    
break;
case 55:
 
        this.$ = 0;
    
break;
case 56:
 
        this.$ = 2;
    
break;
case 57:
 
        this.$ = 7;
    
break;
case 58:
 
        this.$ = {type: 9, tipo: $$[$0]};
    
break;
case 59:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 66:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 67:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 70:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 71:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 76:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 81: case 137: case 138: case 141:

        this.$ = $$[$0-1];
    
break;
case 82:
 
        var cad = String($$[$0])
        cad = cad.replace('"', '')
        cad = cad.replace('"', '')
        //cad = cad.trim();
        this.$ = new Literal(cad, _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 83: case 84:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 85: case 86:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 87:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 88:
 
        this.$ = $$[$0-3] + '[' + $$[$0-1] + ']'
    
break;
case 89:
 
        this.$ = '[' + $$[$0-1] + ']'
    
break;
case 90: case 91:
 
        this.$ = $$[$0]
    
break;
case 92:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 93:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 94:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 96:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 97:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 98: case 101: case 109:

        this.$ = null;
    
break;
case 102:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 103:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 104:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 107:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 108:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 110:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 111: case 112:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FORIN(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 113: case 114:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FOROF(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 116:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 117:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 118:

        this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 119:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 120:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 121:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 122:

        this.$ = new ObjectLiteral($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 123:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 125:

        this.$ = new TypeValue($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 126:

        this.$ = new Type($$[$0-5], 9, $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 127:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 128: case 144:

        this.$ = [$$[$0]];
    
break;
case 129:

        this.$ = new PrimType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 130: case 132: case 133:
 
        this.$ = $$[$0];
    
break;
case 134:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 135:

        this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 136: case 145:

        this.$ = $$[$0-2];
    
break;
case 139:

        this.$ = $$[$0-4];
    
break;
case 140:

        this.$ = $$[$0-5];
    
break;
case 143: case 148:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 146:

        this.$ = new Call($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 147:

        this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{1:[3]},{5:[1,48],6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),{24:[1,50]},{24:[1,51]},o($Vo,$Vp,{44:56,25:[1,52],27:[1,53],31:$Vq,36:[1,55],45:[1,54]}),{29:[1,58],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:[1,71]},{29:[1,72]},{29:[1,73]},{24:$VD,28:74,29:[1,75],36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{36:[1,78]},{36:[1,79]},{36:[1,80]},{78:81,80:$VE},{36:[1,83]},{45:[1,84]},{24:[1,85]},o([29,38,39,55,56,57,58,59,60,61,62,63,64],$VF,{47:[1,86],49:$VG}),{24:$VD,28:88,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:89,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VH,[2,78]),o($VH,[2,79]),o($VH,[2,80]),{24:$VD,28:90,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VH,[2,82]),o($VH,[2,83]),o($VH,[2,84]),o($VH,[2,85]),o($VH,[2,86]),{24:$VI,99:91,100:92},{1:[2,1]},o($Vn,[2,2]),{25:[1,94],27:[1,95],29:[1,96]},{25:[1,97],27:[1,98]},{24:$VJ,26:99,51:$VK,52:$VL,53:$VM,54:$VN},{24:$VD,28:105,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vo,$VO,{24:[1,106],46:$VP}),{24:$VD,28:110,36:$V2,37:[1,108],43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf,114:109},o($VQ,[2,40],{31:[1,112],45:[1,111]}),{24:$VR,69:$VS,73:113},o($Vn,[2,53]),{24:$VD,28:116,36:$V2,43:76,48:38,55:[1,117],56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:118,36:$V2,43:76,48:38,56:[1,119],65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:120,36:$V2,43:76,48:38,56:$V4,57:[1,121],65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:122,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:123,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:124,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,27:[1,126],28:125,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,27:[1,128],28:127,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:129,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:130,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:131,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:132,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{27:[1,133]},o($Vn,[2,92]),o($Vn,[2,93]),{29:[1,134],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,95]),o($VH,$VF,{49:$VG}),o($VT,$Vp,{44:56,31:$Vq,45:[1,135]}),{24:$VD,28:136,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:137,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:138,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{83:[1,139]},{4:140,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[1,141],83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{23:[1,144],24:[1,146],92:142,93:[1,143],96:145},{98:[1,147]},{36:[1,148]},{36:[1,149]},{36:[1,150]},o($VU,[2,66],{57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VH,[2,75]),{37:[1,151],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{41:[1,153],81:[1,152]},o($VV,[2,124]),{25:[1,154]},{24:$VJ,26:155,35:[1,156],51:$VK,52:$VL,53:$VM,54:$VN},{24:$VD,28:157,31:[1,158],34:[1,159],36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,23]),{24:$VJ,26:160,51:$VK,52:$VL,53:$VM,54:$VN},{24:$VD,28:161,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{27:[1,162],30:163,31:$VW},o($VX,[2,54]),o($VX,[2,55]),o($VX,[2,56]),o($VX,[2,57]),o($VX,[2,58]),{29:[1,165],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vo,$VY,{27:[1,166]}),o($VQ,[2,41]),{29:[1,167]},{37:[1,168],41:[1,169]},o($VZ,[2,149],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($VQ,[2,39]),{24:$VR,69:$VS,73:170},{33:[1,171]},{33:[2,90]},{33:[2,91]},o($VU,[2,59],{57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VH,[2,76]),o($VU,[2,60],{57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($VH,[2,77],{48:38,66:39,67:40,43:76,28:88,24:$VD,36:$V2,65:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf}),o($V_,[2,61],{59:$Vx,60:$Vy}),{24:$VD,28:172,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($V_,[2,62],{59:$Vx,60:$Vy}),o($VH,[2,63]),o($VH,[2,64]),o($V$,[2,67],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),{24:$VD,28:173,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($V$,[2,68],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),{24:$VD,28:174,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($V01,[2,71],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($V01,[2,72],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o([25,29,33,37,41,63,64,81],[2,73],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA}),o([25,29,33,37,41,64,81],[2,74],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB}),{80:[1,175]},o($Vn,[2,94]),o($VT,$VO,{24:[1,176],46:$VP}),{37:[1,177],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{37:[1,178],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{37:[1,179],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{36:[1,180]},{6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[1,181],83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($V11,[2,98]),{29:[1,182]},{24:[1,183]},{24:[1,184]},{29:[2,115]},{27:[1,185]},{36:[1,186]},{24:$V21,37:[1,188],106:187,113:189},{24:$VD,28:191,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,192]},o($VH,[2,81]),o($VH,[2,122]),{24:$VI,100:193},{24:$VD,28:194,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{27:[1,195],29:[1,196],30:197,31:$VW},{38:[1,198]},{29:[1,199],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:$VD,28:203,31:$V31,32:200,33:$V41,36:$V2,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,205]},{27:[1,206]},{29:[1,207],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:$VD,28:208,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{27:[1,209]},{33:[1,210]},o($Vn,[2,51]),{24:$VD,28:211,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,146]),{29:[1,212]},{24:$VD,28:213,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{33:[1,214]},o($V51,[2,89]),o($V_,[2,65],{59:$Vx,60:$Vy}),o($V$,[2,69],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),o($V$,[2,70],{55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy}),{24:$V61,102:215,103:216},o($VT,$VY),{78:218,80:$VE},{80:[1,219]},{78:220,80:$VE},{24:$VD,28:221,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($V11,[2,97]),{24:$VD,28:222,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{25:[1,225],27:[1,226],94:[1,223],95:[1,224]},{25:[1,229],27:[1,230],94:[1,227],95:[1,228]},{24:$VD,28:231,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:232,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,233],41:[1,234]},{78:235,80:$VE},o($VZ,[2,144]),{25:[1,236]},{37:[1,237],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($VH,[2,46]),o($VV,[2,123]),o($VV,[2,125],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),{24:$VD,28:238,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,21]),{27:[1,239],29:[1,240]},{24:$VJ,26:241,51:$VK,52:$VL,53:$VM,54:$VN},o($Vn,[2,22]),{33:[1,242]},o([33,37],[2,33],{41:$V71}),o($V81,[2,36]),o($V81,[2,37],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),{24:$VD,28:203,31:$V31,36:$V2,40:244,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{36:[1,245]},{24:$VD,28:246,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,48]),{29:[1,247],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:$VD,28:248,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o([27,29],[2,32]),{29:[1,249],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,147]),o($VZ,[2,148],{38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o($V51,[2,88]),{41:[1,251],81:[1,250]},o($VV,[2,128]),{25:[1,252]},o($Vn,[2,101],{79:253,82:[1,254]}),{86:255,88:256,89:$V91},o($Vn,[2,102]),{37:[1,258],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{29:[1,259],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{24:[1,260]},{24:[1,261]},{24:$VJ,26:262,51:$VK,52:$VL,53:$VM,54:$VN},{24:$VD,28:263,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:[1,264]},{24:[1,265]},{24:$VJ,26:266,51:$VK,52:$VL,53:$VM,54:$VN},{24:$VD,28:267,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[2,116],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{37:[1,268],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{78:269,80:$VE},{24:$V21,113:270},o($Vn,[2,135]),{24:$VJ,26:271,51:$VK,52:$VL,53:$VM,54:$VN},{29:[1,272]},{29:[1,273],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{31:[1,274],34:[1,275]},o($Vn,[2,25]),{39:[1,276]},{29:[1,277]},{24:$VD,28:203,31:$V31,36:$V2,42:278,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{33:[1,279],41:$V71},{24:$VD,28:203,31:$V31,32:280,36:$V2,37:$V41,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[1,281],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,49]),{29:[1,282],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,52]),{29:[1,283]},{24:$V61,103:284},{24:[1,289],51:[1,287],52:[1,286],53:[1,288],104:285},o($Vn,[2,96]),{14:291,77:$Ve,78:290,80:$VE},{81:[2,109],87:292,88:293,89:$V91,90:[1,294]},o($Va1,[2,106]),{24:$VD,28:295,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[1,296]},{24:$VD,28:297,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,298]},{37:[1,299]},{27:[1,300]},{29:[2,118],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{37:[1,301]},{37:[1,302]},{27:[1,303]},{29:[2,120],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{29:[1,304]},o($Vn,[2,134]),o($VZ,[2,143]),o($VZ,[2,145]),o($Vn,[2,45]),o($Vn,[2,20]),{24:$VD,28:203,31:$V31,32:305,33:$V41,36:$V2,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,306]},{27:[1,307],29:[1,308]},o($Vn,[2,30]),o($V81,[2,35]),o($V81,[2,38]),{37:[1,309]},o($Vn,[2,47]),o($Vn,[2,50]),o($Vn,[2,126]),o($VV,[2,127]),o($VV,[2,129]),o($VV,[2,130]),o($VV,[2,131]),o($VV,[2,132]),o($VV,[2,133]),o($Vn,[2,99]),o($Vn,[2,100]),{81:[1,310]},o($Va1,[2,105]),{25:[1,311]},{25:[1,312],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,103]),{37:[1,313],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{78:314,80:$VE},{78:315,80:$VE},{24:$VD,28:316,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{78:317,80:$VE},{78:318,80:$VE},{24:$VD,28:319,36:$V2,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,121]),{33:[1,320]},{36:[1,321]},{31:[1,322],34:[1,323]},o($Vn,[2,28]),{29:[1,324]},o($Vn,[2,104]),{4:325,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{4:326,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{78:327,80:$VE},o($Vn,[2,111]),o($Vn,[2,113]),{29:[2,117],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},o($Vn,[2,112]),o($Vn,[2,114]),{29:[2,119],38:$Vr,39:$Vs,55:$Vt,56:$Vu,57:$Vv,58:$Vw,59:$Vx,60:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC},{29:[1,328]},{24:$VD,28:203,31:$V31,32:329,36:$V2,37:$V41,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VD,28:203,31:$V31,32:330,33:$V41,36:$V2,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,331]},o($Vn,[2,31]),{6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V0,24:$V1,28:23,36:$V2,43:35,48:38,50:$V3,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[2,108],83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($Va1,[2,107],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,28:23,43:35,48:38,66:39,67:40,6:49,23:$V0,24:$V1,36:$V2,50:$V3,56:$V4,65:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,84:$Vh,85:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm}),o($Vn,[2,110]),o($Vn,[2,24]),{37:[1,332]},{33:[1,333]},{36:[1,334]},{29:[1,335]},{29:[1,336]},{24:$VD,28:203,31:$V31,32:337,36:$V2,37:$V41,40:201,42:202,43:76,48:38,56:$V4,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,26]),o($Vn,[2,27]),{37:[1,338]},{29:[1,339]},o($Vn,[2,29])],
defaultActions: {48:[2,1],114:[2,90],115:[2,91],145:[2,115]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/enums');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { TypeAccess } = require('../tools/expression/TypeAccess');
    const { Literal } = require('../tools/expression/Literal');
    const { ObjectLiteral } = require('../tools/expression/ObjectLiteral');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { TypeNoType } = require('../tools/sentences/TypeNoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { FORIN } = require('../tools/sentences/ForIn');
    const { FOROF } = require('../tools/sentences/ForOf');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');
    const { Arrays } = require('../tools/declaration_type/Arrays');
    const { ArrayObject } = require('../tools/declaration_type/ArrayObject');
    const { ArrayParam } = require('../tools/model/ArrayParam');
    const { Pushs } = require('../tools/sentences/Push');
    const { Pop } = require('../tools/sentences/Pop');
    const { TypeValue } = require('../tools/sentences/TypeValue');
    const { Return } = require('../tools/sentences/Return');
    const { Continue } = require('../tools/sentences/Continue');
    const { Type } = require('../tools/sentences/Type');
    const { PrimType } = require('../tools/sentences/PrimType');
    const { Call } = require('../tools/sentences/Call');
    const { Function } = require('../tools/sentences/Function');
    const { Constant } = require('../tools/sentences/Constant');
        


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 70
break;
case 4:return 69
break;
case 5:return 68
break;
case 6:return 68
break;
case 7:return 68
break;
case 8:return 57
break;
case 9:return 58
break;
case 10:return 56
break;
case 11:return 55
break;
case 12:return 59
break;
case 13:return 60
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 41
break;
case 17:return 45
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 61
break;
case 23:return 62
break;
case 24:return 64
break;
case 25:return 63
break;
case 26:return 65
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 80
break;
case 31:return 81
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 81
break;
case 35:return 81
break;
case 36:return 23
break;
case 37:return 93
break;
case 38:return 50
break;
case 39:return 77
break;
case 40:return 82
break;
case 41:return 85
break;
case 42:return 90
break;
case 43:return 89
break;
case 44:return 83
break;
case 45:return 84
break;
case 46:return 91
break;
case 47:return 97
break;
case 48:return 98
break;
case 49:return 74
break;
case 50:return 75
break;
case 51:return 76
break;
case 52:return 105
break;
case 53:return 51
break;
case 54:return 52
break;
case 55:return 53
break;
case 56:return 71
break;
case 57:return 72
break;
case 58:return 95
break;
case 59:return 94
break;
case 60:return 47
break;
case 61:return 49
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 54
break;
case 65:return 46
break;
case 66:return 101
break;
case 67:return 24;
break;
case 68:return 5;
break;
case 69:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}