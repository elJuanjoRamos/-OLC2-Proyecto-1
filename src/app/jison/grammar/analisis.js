/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analisis = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,22],$V2=[1,20],$V3=[1,21],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,28],$V9=[1,29],$Va=[1,27],$Vb=[1,30],$Vc=[1,31],$Vd=[1,32],$Ve=[5,22,23,33,37,61,62,63,64,68,70,71,72,76,77,78,81,84],$Vf=[1,54],$Vg=[1,50],$Vh=[1,45],$Vi=[1,46],$Vj=[1,48],$Vk=[1,49],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,59],$Vp=[1,67],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,83],$Vu=[1,84],$Vv=[1,85],$Vw=[1,86],$Vx=[1,87],$Vy=[1,88],$Vz=[1,89],$VA=[1,90],$VB=[1,91],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[24,28,32,36,41,42,43,44,45,46,47,48,49,50,51,52,56],$VG=[26,28,30,36,56],$VH=[36,56],$VI=[24,28,32,36,41,42,47,48,49,50,51,52,56],$VJ=[5,22,23,33,37,61,62,63,64,68,69,70,71,72,76,77,78,81,84],$VK=[1,160],$VL=[24,28,32,36,41,42,43,44,47,48,49,50,51,52,56],$VM=[24,28,32,36,47,48,49,50,51,52,56],$VN=[24,28,32,36,49,50,51,52,56],$VO=[1,193],$VP=[1,195],$VQ=[1,212],$VR=[1,223],$VS=[68,76,77],$VT=[2,109],$VU=[1,260],$VV=[32,36],$VW=[68,84];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION_VAR":7,"DECLARACION_LET":8,"DECLARACION_CONST":9,"DECLARATION_NOTYPE":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"LLAMADA_FUNCION":20,"FUNCIONES":21,"RESERV_VAR":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESION":27,";":28,"ARRAY":29,"[":30,"ARRAY_CONTENT":31,"]":32,"RESERV_LET":33,"SIZE_OF_ARRAY":34,"NUMERO":35,",":36,"RESERV_CONST":37,"RESERV_STRING":38,"RESERV_NUMBER":39,"RESERV_BOOLEAN":40,"+":41,"-":42,"*":43,"/":44,"%":45,"^":46,"<":47,">":48,"==":49,"!=":50,"&&":51,"||":52,"!":53,"IDENTIFICADOR":54,"(":55,")":56,"CADENA":57,"DECIMAL":58,"RESERV_TRUE":59,"RESERV_FALSE":60,"RESERV_BREAK":61,"RESERV_CONTINUE":62,"RESERV_RETURN":63,"RESERV_IF":64,"SENTENCIA":65,"ELIF":66,"{":67,"}":68,"RESERV_ELSE":69,"RESERV_WHILE":70,"RESERV_DO":71,"RESERV_SWITCH":72,"CASES":73,"DEFAULT":74,"CASE":75,"RESERV_CASE":76,"RESERV_DEFAULT":77,"RESERV_FOR":78,"DECLA_FOR":79,"DECLARACION_FOR":80,"RESERV_CONSOLE":81,".":82,"RESERV_LOG":83,"RESERV_FUNCTION":84,"SENTENCIA_FUNCION":85,"PARAMETROS":86,"FUNCIONHIJA":87,"FUNCION_HIJA":88,"OTRA_INSTRUCCION":89,"PARAMETRO":90,"PARAMETROS_LLAMADA":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"RESERV_VAR",23:"ID",24:":",26:"=",28:";",30:"[",32:"]",33:"RESERV_LET",35:"NUMERO",36:",",37:"RESERV_CONST",38:"RESERV_STRING",39:"RESERV_NUMBER",40:"RESERV_BOOLEAN",41:"+",42:"-",43:"*",44:"/",45:"%",46:"^",47:"<",48:">",49:"==",50:"!=",51:"&&",52:"||",53:"!",55:"(",56:")",57:"CADENA",58:"DECIMAL",59:"RESERV_TRUE",60:"RESERV_FALSE",61:"RESERV_BREAK",62:"RESERV_CONTINUE",63:"RESERV_RETURN",64:"RESERV_IF",67:"{",68:"}",69:"RESERV_ELSE",70:"RESERV_WHILE",71:"RESERV_DO",72:"RESERV_SWITCH",76:"RESERV_CASE",77:"RESERV_DEFAULT",78:"RESERV_FOR",81:"RESERV_CONSOLE",82:".",83:"RESERV_LOG",84:"RESERV_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,6],[7,4],[8,7],[8,5],[8,5],[8,3],[8,10],[8,6],[8,6],[8,4],[29,3],[34,1],[34,0],[31,3],[31,1],[9,7],[9,5],[10,6],[10,7],[10,4],[25,1],[25,1],[25,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,2],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[54,3],[54,1],[54,1],[54,1],[54,1],[54,1],[54,1],[11,2],[12,2],[13,2],[13,3],[14,6],[65,3],[65,2],[66,2],[66,2],[66,0],[16,5],[17,7],[15,8],[73,2],[73,1],[75,4],[74,3],[74,0],[18,9],[79,1],[79,3],[80,6],[80,4],[80,6],[80,4],[19,7],[21,5],[21,6],[85,3],[85,2],[87,2],[88,5],[88,6],[89,2],[89,0],[86,3],[86,1],[90,3],[20,4],[20,5],[91,3],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 88:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 89:

        this.$ = [$$[$0]]
    
break;
case 4: case 7: case 11: case 13: case 14: case 15: case 16: case 67:

        this.$ = $$[$0]
    
break;
case 5: case 6: case 9: case 10: case 17: case 116:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 8: case 12: case 18: case 82: case 83: case 109: case 111:

        this.$ = $$[$0];
    
break;
case 19: case 27:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 20: case 28:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 21: case 29:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 22: case 30:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 23: case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5].node, $$[$0-4], $$[$0-3].node, $$[$0-2])};
    
break;
case 24: case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 25: case 33: case 42:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 26: case 34:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 35: case 68: case 81: case 104: case 105: case 108:

        this.$ = $$[$0-1];
    
break;
case 36: case 94:
 this.$ = $$[$0] 
break;
case 37:
 this.$ = null 
break;
case 40:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 41:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 43:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 44:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 45:

        this.$ = 1;
    
break;
case 46:
 
        this.$ = 0;
    
break;
case 47:
 
        this.$ = 2;
    
break;
case 48:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 49:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 50:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 51:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 52:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 53:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.EXPONENT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 54:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 55:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 56:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 57:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 58:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 59:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 60:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 62:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 65:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 66:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 70: case 71:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 72: case 73:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 74:
 
        this.$ = new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
    
break;
case 75:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 76: case 77:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 78:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 79:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 80:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 84: case 92:

        this.$ = null;
    
break;
case 85:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 86:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 87:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 90:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 91:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 93:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 95:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 97:

        this.$ = new Declaration($$[$0-2], 0, $$[$02], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 98:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 99:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 100:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 101: case 106:

        this.$ = $$[$0-4];
    
break;
case 102: case 107:

        this.$ = $$[$0-5];
    
break;
case 103: case 110: case 112:

        this.$ = $$[$0-2];
    
break;
case 113:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 114:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 115:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},{1:[3]},{5:[1,33],6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),{23:[1,35]},{23:[1,36]},{23:[1,37]},{24:[1,38],26:[1,39],55:[1,40]},{28:[1,41]},{28:[1,42]},{23:$Vf,27:44,28:[1,43],35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{55:[1,55]},{55:[1,56]},{55:[1,57]},{65:58,67:$Vo},{55:[1,60]},{82:[1,61]},{23:[1,62]},{1:[2,1]},o($Ve,[2,2]),{24:[1,63],26:[1,64],28:[1,65],29:66,30:$Vp},{24:[1,68],26:[1,69],28:[1,70],29:71,30:$Vp},{24:[1,72],26:[1,73]},{25:74,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:78,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:81,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,56:[1,79],57:$Vk,58:$Vl,59:$Vm,60:$Vn,91:80},o($Ve,[2,75]),o($Ve,[2,76]),o($Ve,[2,77]),{28:[1,82],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:95,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:96,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VF,[2,67]),{23:$Vf,27:97,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74]),{23:$Vf,27:98,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:99,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:100,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{70:[1,101]},{4:102,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,68:[1,103],70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},{22:[1,107],23:[1,106],33:[1,108],79:104,80:105},{83:[1,109]},{55:[1,110]},{25:111,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:112,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,22]),{26:[1,113],28:[1,114]},{32:[2,37],34:115,35:[1,116]},{25:117,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:118,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,30]),{26:[1,119],28:[1,120]},{25:121,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:122,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{26:[1,123],29:124,30:$Vp},o($VG,[2,45]),o($VG,[2,46]),o($VG,[2,47]),{28:[1,125],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{28:[1,126]},{36:[1,128],56:[1,127]},o($VH,[2,116],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE}),o($Ve,[2,78]),{23:$Vf,27:129,35:$Vg,41:[1,130],42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:131,35:$Vg,42:[1,132],53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:133,35:$Vg,42:$Vh,43:[1,134],53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:135,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:136,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:137,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,26:[1,139],27:138,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,26:[1,141],27:140,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:142,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:143,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:144,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:145,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VI,[2,55],{43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($VF,[2,64]),{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,146]},{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,147]},{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,148]},{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,149]},{55:[1,150]},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,68:[1,151],70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},o($VJ,[2,81]),{28:[1,152]},{28:[2,94]},{26:[1,153]},{23:[1,154]},{23:[1,155]},{55:[1,156]},{23:$VK,56:[1,157],86:158,90:159},{26:[1,161],28:[1,162],29:163,30:$Vp},{28:[1,164],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:165,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,26]),{32:[1,166]},{32:[2,36]},{26:[1,167],28:[1,168],29:169,30:$Vp},{28:[1,170],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:171,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,34]),{26:[1,172]},{28:[1,173],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:174,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{26:[1,175]},o($Ve,[2,44]),o($Ve,[2,113]),{28:[1,176]},{23:$Vf,27:177,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VI,[2,48],{43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($VF,[2,65]),o($VI,[2,49],{43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($VF,[2,66],{54:47,27:95,23:$Vf,35:$Vg,53:$Vi,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn}),o($VL,[2,50],{45:$Vx,46:$Vy}),{23:$Vf,27:178,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VL,[2,51],{45:$Vx,46:$Vy}),o($VF,[2,52]),o($VF,[2,53]),o($VM,[2,56],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),{23:$Vf,27:179,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VM,[2,57],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),{23:$Vf,27:180,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VN,[2,60],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o($VN,[2,61],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA}),o([24,28,32,36,51,52,56],[2,62],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC}),o([24,28,32,36,52,56],[2,63],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD}),o($VF,[2,68]),{65:181,67:$Vo},{67:[1,182]},{65:183,67:$Vo},{23:$Vf,27:184,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($VJ,[2,80]),{23:$Vf,27:185,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:186,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{24:[1,187],26:[1,188]},{24:[1,189],26:[1,190]},{23:$Vf,27:191,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{67:$VO,85:192},{36:$VP,56:[1,194]},o($VH,[2,111]),{24:[1,196]},{23:$Vf,27:197,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,20]),{26:[1,198],28:[1,199]},o($Ve,[2,21]),{28:[1,200],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},o([26,28],[2,35]),{23:$Vf,27:201,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,28]),{26:[1,202],28:[1,203]},o($Ve,[2,29]),{28:[1,204],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:205,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,41]),{28:[1,206],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{23:$Vf,27:207,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,114]),o($VH,[2,115],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE}),o($VL,[2,54],{45:$Vx,46:$Vy}),o($VM,[2,58],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($VM,[2,59],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy}),o($Ve,[2,84],{66:208,69:[1,209]}),{73:210,75:211,76:$VQ},o($Ve,[2,85]),{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,213]},{28:[1,214],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{28:[2,95],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{25:215,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:216,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{25:217,38:$Vq,39:$Vr,40:$Vs},{23:$Vf,27:218,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,219]},o($Ve,[2,101]),{68:[1,221],84:$VR,87:220,88:222},{67:$VO,85:224},{23:$VK,90:225},{25:226,38:$Vq,39:$Vr,40:$Vs},{28:[1,227],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{30:[1,228]},o($Ve,[2,24]),o($Ve,[2,25]),{28:[1,229],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{30:[1,230]},o($Ve,[2,32]),o($Ve,[2,33]),{28:[1,231],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},o($Ve,[2,42]),{28:[1,232],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},o($Ve,[2,79]),{14:234,64:$V7,65:233,67:$Vo},{68:[2,92],74:235,75:236,76:$VQ,77:[1,237]},o($VS,[2,89]),{23:$Vf,27:238,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{28:[1,239]},{23:$Vf,27:240,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{26:[1,241]},{28:[2,97],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{26:[1,242]},{28:[2,99],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{28:[1,243]},{68:[1,244]},o($Ve,[2,104]),{68:$VT,84:$VR,88:246,89:245},{23:[1,247]},o($Ve,[2,102]),o($VH,[2,110]),o($VH,[2,112]),o($Ve,[2,19]),{23:$Vf,27:249,31:248,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,27]),{23:$Vf,27:249,31:250,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,40]),o($Ve,[2,43]),o($Ve,[2,82]),o($Ve,[2,83]),{68:[1,251]},o($VS,[2,88]),{24:[1,252]},{24:[1,253],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},o($Ve,[2,86]),{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE,56:[1,254]},{23:$Vf,27:255,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{23:$Vf,27:256,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},o($Ve,[2,100]),o($Ve,[2,103]),{68:[2,105]},{68:$VT,84:$VR,88:246,89:257},{55:[1,258]},{32:[1,259],36:$VU},o($VV,[2,39],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE}),{32:[1,261],36:$VU},o($Ve,[2,87]),{4:262,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},{4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},{65:264,67:$Vo},{28:[2,96],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{28:[2,98],41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE},{68:[2,108]},{23:$VK,56:[1,265],86:266,90:159},{28:[1,267]},{23:$Vf,27:268,35:$Vg,42:$Vh,53:$Vi,54:47,55:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn},{28:[1,269]},{6:34,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,68:[2,91],70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd},o($VS,[2,90],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,6:34,22:$V0,23:$V1,33:$V2,37:$V3,61:$V4,62:$V5,63:$V6,64:$V7,70:$V8,71:$V9,72:$Va,78:$Vb,81:$Vc,84:$Vd}),o($Ve,[2,93]),{67:$VO,85:270},{36:$VP,56:[1,271]},o($Ve,[2,23]),o($VV,[2,38],{41:$Vt,42:$Vu,43:$Vv,44:$Vw,45:$Vx,46:$Vy,47:$Vz,48:$VA,49:$VB,50:$VC,51:$VD,52:$VE}),o($Ve,[2,31]),o($VW,[2,106]),{67:$VO,85:272},o($VW,[2,107])],
defaultActions: {33:[2,1],105:[2,94],116:[2,36],245:[2,105],257:[2,108]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/type');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 58
break;
case 4:return 35
break;
case 5:return 57
break;
case 6:return 57
break;
case 7:return 57
break;
case 8:return 43
break;
case 9:return 44
break;
case 10:return 42
break;
case 11:return 41
break;
case 12:return 45
break;
case 13:return 46
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 36
break;
case 17:return 82
break;
case 18:return 47
break;
case 19:return 48
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 49
break;
case 23:return 50
break;
case 24:return 52
break;
case 25:return 51
break;
case 26:return 53
break;
case 27:return 26
break;
case 28:return 55
break;
case 29:return 56 
break;
case 30:return 67
break;
case 31:return 68
break;
case 32:return 30
break;
case 33:return 32
break;
case 34:return 68
break;
case 35:return 68
break;
case 36:return 33
break;
case 37:return 22
break;
case 38:return 37
break;
case 39:return 64
break;
case 40:return 69
break;
case 41:return 72
break;
case 42:return 77
break;
case 43:return 76
break;
case 44:return 70
break;
case 45:return 71
break;
case 46:return 78
break;
case 47:return 81
break;
case 48:return 83
break;
case 49:return 61
break;
case 50:return 62
break;
case 51:return 63
break;
case 52:return 84
break;
case 53:return 38
break;
case 54:return 39
break;
case 55:return 40
break;
case 56:return 59
break;
case 57:return 60
break;
case 58:return 'RESERV_OF'
break;
case 59:return 'RESERV_IN'
break;
case 60:return 23;
break;
case 61:return 5;
break;
case 62:return 'TK_Desconocido';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analisis;
exports.Parser = analisis.Parser;
exports.parse = function () { return analisis.parse.apply(analisis, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}