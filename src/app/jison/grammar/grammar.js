/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,24],$V3=[1,43],$V4=[1,23],$V5=[1,38],$V6=[1,37],$V7=[1,39],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,47],$Vc=[1,48],$Vd=[1,49],$Ve=[1,34],$Vf=[1,27],$Vg=[1,26],$Vh=[1,29],$Vi=[1,50],$Vj=[1,31],$Vk=[1,30],$Vl=[1,28],$Vm=[1,32],$Vn=[1,35],$Vo=[1,22],$Vp=[1,33],$Vq=[2,5,23,24,36,50,56,58,67,70,71,72,73,74,75,76,77,78,79,83,84,85,86,87,91,92,93,99,103,107],$Vr=[29,38,39,47,49,55,56,57,61,62,63,64,65,66],$Vs=[2,45],$Vt=[1,60],$Vu=[1,67],$Vv=[1,68],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,66],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,78],$VG=[1,85],$VH=[2,88],$VI=[1,88],$VJ=[25,29,33,37,38,39,41,55,56,57,61,62,63,64,65,66,84],$VK=[1,96],$VL=[2,44],$VM=[1,105],$VN=[25,29,33,37,38,39,41,47,49,55,56,57,61,62,63,64,65,66,84],$VO=[25,29,33,37,38,39,41,49,55,56,57,61,62,63,64,65,66,84],$VP=[25,29,33,37,38,39,41,55,56,63,64,65,66,84],$VQ=[41,84],$VR=[1,158],$VS=[1,154],$VT=[1,155],$VU=[1,156],$VV=[1,157],$VW=[2,43],$VX=[37,41],$VY=[25,29,33,37,38,39,41,55,56,57,62,63,64,65,66,84],$VZ=[25,29,33,37,38,39,41,63,64,65,66,84],$V_=[25,29,33,37,41,63,64,65,66,84],$V$=[2,5,23,24,36,50,56,58,67,70,71,72,73,74,75,76,77,78,79,82,83,84,85,86,87,91,92,93,99,103,107],$V01=[1,187],$V11=[27,29,31,37,39,41,83],$V21=[1,204],$V31=[2,35],$V41=[1,208],$V51=[25,29,31,33,37,38,39,41,45,47,49,55,56,57,61,62,63,64,65,66,84],$V61=[1,242],$V71=[33,37,41],$V81=[1,252],$V91=[84,91,92];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"TYPE_DECLARATION":8,"CONST_DECLARATION":9,"DECLARATION_NOTYPE":10,"CONTINUE":11,"BREAK":12,"SWITCH":13,"IF":14,"DOWHILE":15,"WHILE":16,"FOR":17,"CALL_FUNCTION":18,"FUNCTIONS":19,"RETURN":20,"CONSOLE":21,"PUSH":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESSION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"ARRAY_CONTENT":40,",":41,"MORE_ARRAY":42,"PRODUCCION_ID":43,"MATRIZ_IDEN":44,".":45,"RESERV_LENGTH":46,"RESERV_PUSH":47,"POP":48,"RESERV_POP":49,"RESERV_CONST":50,"RESERV_STRING":51,"RESERV_NUMBER":52,"RESERV_BOOLEAN":53,"RESERV_ANY":54,"+":55,"-":56,"*":57,"EXPRESION":58,"^":59,"**":60,"%":61,"/":62,"==":63,"!=":64,"&&":65,"||":66,"!":67,"IDENTIFICADOR":68,"JSON_EXPRESSION":69,"CADENA":70,"NUMERO":71,"RESERV_NULL":72,"DECIMAL":73,"RESERV_TRUE":74,"RESERV_FALSE":75,"RESERV_RETURN":76,"RESERV_BREAK":77,"RESERV_CONTINUE":78,"RESERV_IF":79,"SENTENCIA":80,"ELIF":81,"RESERV_ELSE":82,"{":83,"}":84,"RESERV_WHILE":85,"RESERV_DO":86,"RESERV_SWITCH":87,"CASES":88,"DEFAULT":89,"CASE":90,"RESERV_CASE":91,"RESERV_DEFAULT":92,"RESERV_FOR":93,"DECLA_FOR":94,"RESERV_VAR":95,"RESERV_IN":96,"RESERV_OF":97,"FOR_DECLARATION":98,"RESERV_CONSOLE":99,"RESERV_LOG":100,"OBJECTS":101,"OBJECT":102,"RESERV_TYPE":103,"PRIMITIVE_DATAS":104,"PRIMITIVE_DATA":105,"TYPE_TIPO":106,"RESERV_FUNCTION":107,"PARAMETERS":108,"FUNCTION_SENTENCE":109,"CHILDFUNCTION":110,"CHILD_FUNCTION":111,"NEW_INSTRUCTION":112,"PR_FUNCTION":113,"PARAMS":114,"CALL_PARAMS":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",41:",",45:".",46:"RESERV_LENGTH",47:"RESERV_PUSH",49:"RESERV_POP",50:"RESERV_CONST",51:"RESERV_STRING",52:"RESERV_NUMBER",53:"RESERV_BOOLEAN",54:"RESERV_ANY",55:"+",56:"-",57:"*",58:"EXPRESION",59:"^",60:"**",61:"%",62:"/",63:"==",64:"!=",65:"&&",66:"||",67:"!",70:"CADENA",71:"NUMERO",72:"RESERV_NULL",73:"DECIMAL",74:"RESERV_TRUE",75:"RESERV_FALSE",76:"RESERV_RETURN",77:"RESERV_BREAK",78:"RESERV_CONTINUE",79:"RESERV_IF",82:"RESERV_ELSE",83:"{",84:"}",85:"RESERV_WHILE",86:"RESERV_DO",87:"RESERV_SWITCH",91:"RESERV_CASE",92:"RESERV_DEFAULT",93:"RESERV_FOR",95:"RESERV_VAR",96:"RESERV_IN",97:"RESERV_OF",99:"RESERV_CONSOLE",100:"RESERV_LOG",103:"RESERV_TYPE",107:"RESERV_FUNCTION",113:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[30,2],[32,1],[32,0],[40,3],[40,1],[42,1],[42,3],[43,3],[43,2],[43,3],[43,3],[43,2],[43,1],[22,6],[48,4],[9,7],[9,5],[10,4],[10,6],[10,2],[26,1],[26,1],[26,1],[26,1],[26,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,2],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[28,1],[68,3],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[44,4],[44,3],[20,3],[20,2],[12,2],[11,2],[14,6],[81,2],[81,2],[81,0],[80,3],[80,2],[16,5],[15,7],[13,8],[88,2],[88,1],[90,4],[89,3],[89,0],[17,9],[17,8],[17,8],[17,8],[17,8],[94,1],[94,3],[98,6],[98,4],[98,6],[98,4],[21,7],[69,3],[101,3],[101,1],[102,3],[8,7],[104,3],[104,1],[105,3],[106,1],[106,1],[106,1],[106,1],[19,8],[19,6],[19,7],[19,5],[109,3],[109,2],[110,2],[111,5],[111,6],[112,2],[112,0],[108,3],[108,1],[114,3],[18,4],[18,5],[115,3],[115,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return this.$;
    
break;
case 2: case 104:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1]
    
break;
case 3: case 105: case 123: case 150:

        this.$ = [$$[$0]]
    
break;
case 4: case 5: case 6: case 7: case 8: case 11: case 12: case 13: case 14: case 17: case 18: case 78: case 79: case 80:

        this.$ = $$[$0]
    
break;
case 9: case 10: case 15: case 16: case 19: case 96: case 97: case 130: case 143:

        this.$ = $$[$0];
    
break;
case 20:
 
        this.$ = new ErrorProduction(yytext, "Sitactico",this._$.first_line, this._$.first_column, 1);
    
break;
case 21:

        this.$ = new Declaration($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 22:

        this.$ = new Declaration($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 23:

        this.$ = new Declaration($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 24:

        this.$ = new Declaration($$[$0-1], null, null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 25:

        this.$ = new Arrays($$[$0-8], $$[$0-6], $$[$0-2],  _$[$0-9].first_line, _$[$0-9].first_column);
    
break;
case 26:

        this.$ = new Arrays($$[$0-4], $$[$0-2], null,  _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 27:

        this.$ = new ArrayObject($$[$0-10], $$[$0-8], $$[$0-2],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 28:

        this.$ = new Arrays($$[$0-10], $$[$0-6], $$[$0-3],  _$[$0-11].first_line, _$[$0-11].first_column);
    
break;
case 29:

        this.$ = new Arrays($$[$0-6], $$[$0-2], null,  _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 30:

        this.$ = new ArrayObject($$[$0-12], $$[$0-8], $$[$0-2],  _$[$0-13].first_line, _$[$0-13].first_column);
    
break;
case 31:

        this.$ = new Arrays($$[$0-5], 7, $$[$0-2],  _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 32:

        this.$ = new ArrayObject($$[$0-7], 7, $$[$0-2],  _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 33:
  
break;
case 34: case 114:
 this.$ = $$[$0] 
break;
case 35:
 this.$ = null 
break;
case 36:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2]
    
break;
case 37:

        this.$ = [$$[$0]]
    
    
break;
case 38:

        var cont = new ArrayParam($$[$0], false);
        this.$= cont
    
break;
case 39:

        var cont = new ArrayParam($$[$0-1], true);
        this.$= cont    
    
break;
case 40:
 this.$ = new ArrayAccess($$[$0-2],$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 41:
 this.$ = new ArrayAccess($$[$0-1],$$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 42:
 this.$= new Access($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$ = new TypeAccess($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 44:
 this.$= new Access($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 45:
 this.$= new Access($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 46:

        this.$ = new Pushs($$[$0-5], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column)
    
break;
case 47:

        this.$ = new Pop($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column)
    
break;
case 48:

        this.$ = new Constant($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 49:

        this.$ = new Constant($$[$0-3], 7, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 50:

        this.$ = new NoType($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 51:

        this.$ = new TypeNoType($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 52:

        this.$ = $$[$0-1]
    
break;
case 53:

        this.$ = 1;
    
break;
case 54:
 
        this.$ = 0;
    
break;
case 55:
 
        this.$ = 2;
    
break;
case 56:
 
        this.$ = 7;
    
break;
case 57:
 
        this.$ = {type: 9, tipo: $$[$0]};
    
break;
case 58:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUM, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 59:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.SUBTRACTION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 60:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MULTIPLICATION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 61: case 62:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OpcionAritmetica.EXPONENTE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 63:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.MODULE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 64:

        this.$ = new Arithmetic($$[$0-2], $$[$0], OpArithmetic.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 65:

        this.$ = new Arithmetic($$[$0-3], $$[$0], OpArithmetic.EXPONENT, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 66:

        this.$ = new Arithmetic($$[$0], $$[$0], OpArithmetic.NEGATIVE, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 67:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.LESS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 68:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.HIGHER, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 69:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.LESS_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 70:

        this.$ = new Relational($$[$0-3], $$[$0], OpRelational.HIGHER_EQUALS, _$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 71:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.EQUALS, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 72:

        this.$ = new Relational($$[$0-2], $$[$0], OpRelational.DISCTINCT, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 74:

        this.$ = new Logical($$[$0-2], $$[$0], OpLogical.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Logical($$[$0], $$[$0], OpLogical.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 76:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.INCREASE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Arithmetic($$[$0-2], $$[$0-2], OpArithmetic.DECREME, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 81: case 138: case 139: case 142:

        this.$ = $$[$0-1];
    
break;
case 82:
 
        var cad = String($$[$0])
        cad = cad.replace('"', '')
        cad = cad.replace('"', '')
        //cad = cad.trim();
        this.$ = new Literal(cad, _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 83: case 85:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
    
break;
case 84:
 
        this.$ = new NullEx(_$[$0].first_line, _$[$0].first_column, 4)
    
break;
case 86: case 87:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
    
break;
case 88:
 
        this.$ = $$[$0]
    
break;
case 89:
 
        this.$ = $$[$0-3].push($$[$0-1]) 
    
break;
case 90:
 
        this.$ = [$$[$0-1]] 
    
break;
case 91:

        this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 92:

        this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 93:

        this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 94:

        this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 95:

        this.$ = new IF($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 98: case 100: case 108:

        this.$ = null;
    
break;
case 99:

        this.$ = new Sentence($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 101:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 102:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 103:

        if($$[$0-1] == undefined) {
            this.$ = new Switch($$[$0-5], $$[$0-2],null, _$[$0-7].first_line, _$[$0-7].first_column);
        } else {
            this.$ = new Switch($$[$0-5], $$[$0-2],$$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column);
        }
    
break;
case 106:

        var sent = new Sentence($$[$0], _$[$0-3].first_line, _$[$0-3].first_column)
        //private condition: Expression,private code: Sentence,row: number,column: number
        this.$ = new Case($$[$0-2], sent, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 107:

        var sent = new Sentence($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
        this.$ = new Default(sent, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 109:

        this.$ = new FOR($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column);
    
break;
case 110: case 111:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FORIN(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 112: case 113:

        var declar = new Declaration($$[$0-4], 7, new Literal('0', _$[$0-7].first_line, _$[$0-7].first_column, 0), _$[$0-7].first_line, _$[$0-7].first_column);
        this.$ = new FOROF(declar, $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 115:
 this.$ = new NoType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 116:

         this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 117:

        this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 118:

        this.$ = new Declaration($$[$0-4], $$[$0-2], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 119:

         this.$ = new Declaration($$[$0-2], 0, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 120:

        this.$ =  new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
    
break;
case 121:

        this.$ = new ObjectLiteral($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 122:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2]
    
break;
case 124:

        this.$ = new TypeValue($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 125:

        this.$ = new Type($$[$0-5], 9, $$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 126:

        $$[$0-2].push($$[$0])
        this.$ = $$[$0-2];
    
break;
case 127: case 145:

        this.$ = [$$[$0]];
    
break;
case 128:

        this.$ = new PrimType($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
    
break;
case 129: case 131: case 132:
 
        this.$ = $$[$0];
    
break;
case 133:

        this.$ = new Function($$[$0-6], $$[$0], $$[$0-4], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 134:

        this.$ = new Function($$[$0-4], $$[$0], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 135:

        this.$ = new Function($$[$0-5], $$[$0], [], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 136:

        this.$ = new Function($$[$0-3], $$[$0], [], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 137: case 146:

        this.$ = $$[$0-2];
    
break;
case 140:

        this.$ = $$[$0-4];
    
break;
case 141:

        this.$ = $$[$0-5];
    
break;
case 144: case 149:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 147:

        this.$ = new Call($$[$0-3], [], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 148:

        this.$ = new Call($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},{1:[3]},{2:$V0,5:[1,51],6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},o($Vq,[2,3]),o($Vq,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),{24:[1,53]},{24:[1,54]},{24:[1,55]},o($Vr,$Vs,{44:59,27:[1,56],31:$Vt,36:[1,58],45:[1,57]}),{29:[1,61],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{29:[1,73]},{29:[1,74]},{36:[1,75]},{36:[1,76]},{80:77,83:$VF},{36:[1,79]},{36:[1,80]},{24:[1,81]},{24:$VG,28:82,29:[1,83],36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{45:[1,86]},o([29,38,39,55,56,57,61,62,63,64,65,66],$VH,{47:[1,87],49:$VI}),{59:[1,89],60:[1,90]},{24:$VG,28:91,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:92,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($VJ,[2,78]),o($VJ,[2,79]),o($VJ,[2,80]),{24:$VG,28:93,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($VJ,[2,82]),o($VJ,[2,83]),o($VJ,[2,84]),o($VJ,[2,85]),o($VJ,[2,86]),o($VJ,[2,87]),{24:$VK,101:94,102:95},{1:[2,1]},o($Vq,[2,2]),{25:[1,97],27:[1,98],29:[1,99]},{27:[1,100]},{25:[1,101],27:[1,102]},{24:$VG,28:103,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vr,$VL,{24:[1,104],46:$VM}),{24:$VG,28:108,36:$V3,37:[1,106],43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi,115:107},o($VN,[2,41],{31:[1,110],45:[1,109]}),{24:$VG,36:$V3,43:112,68:111,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd},o($Vq,[2,52]),{24:$VG,28:113,36:$V3,43:84,48:40,55:[1,114],56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:115,36:$V3,43:84,48:40,56:[1,116],58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:117,36:$V3,43:84,48:40,56:$V5,57:[1,118],58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:119,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:120,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,27:[1,122],28:121,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,27:[1,124],28:123,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:125,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:126,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:127,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:128,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,94]),o($Vq,[2,93]),{24:$VG,28:129,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:130,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{85:[1,131]},{2:$V0,4:132,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,84:[1,133],85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},{24:$VG,28:134,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{23:[1,137],24:[1,139],94:135,95:[1,136],98:138},{36:[1,140]},{29:[1,141],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,92]),o($VJ,$VH,{49:$VI}),o($VO,$Vs,{44:59,31:$Vt,45:[1,142]}),{100:[1,143]},{36:[1,144]},{36:[1,145]},{58:[1,146]},{58:[1,147]},o($VP,[2,66],{57:$Vy,61:$Vz,62:$VA}),o($VJ,[2,75]),{37:[1,148],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{41:[1,150],84:[1,149]},o($VQ,[2,123]),{25:[1,151]},{24:$VR,26:152,35:[1,153],51:$VS,52:$VT,53:$VU,54:$VV},{24:$VG,28:159,31:[1,160],34:[1,161],36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,24]),{83:[1,162]},{24:$VR,26:163,51:$VS,52:$VT,53:$VU,54:$VV},{24:$VG,28:164,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{29:[1,165],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vr,$VW,{27:[1,166]}),o($VN,[2,42]),{29:[1,167]},{37:[1,168],41:[1,169]},o($VX,[2,150],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),o($VN,[2,40]),{24:$VG,36:$V3,43:112,68:170,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd},{33:[1,171]},{33:$VH},o($VP,[2,58],{57:$Vy,61:$Vz,62:$VA}),o($VJ,[2,76]),o($VP,[2,59],{57:$Vy,61:$Vz,62:$VA}),o($VJ,[2,77],{48:40,68:41,69:42,43:84,28:91,24:$VG,36:$V3,58:$V6,67:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi}),o($VY,[2,60],{61:$Vz}),{24:$VG,28:172,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($VJ,[2,63]),o($VY,[2,64],{61:$Vz}),o($VZ,[2,67],{55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),{24:$VG,28:173,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($VZ,[2,68],{55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),{24:$VG,28:174,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($V_,[2,71],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),o($V_,[2,72],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),o([25,29,33,37,41,65,66,84],[2,73],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC}),o([25,29,33,37,41,66,84],[2,74],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD}),{37:[1,175],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{37:[1,176],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{36:[1,177]},{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,84:[1,178],85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},o($V$,[2,100]),{37:[1,179],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{29:[1,180]},{24:[1,181]},{24:[1,182]},{29:[2,114]},{27:[1,183]},{24:$V01,37:[1,185],108:184,114:186},o($Vq,[2,91]),o($VO,$VL,{24:[1,188],46:$VM}),{36:[1,189]},{24:$VG,28:190,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{37:[1,191]},o($VJ,[2,61]),o($VJ,[2,62]),o($VJ,[2,81]),o($VJ,[2,121]),{24:$VK,102:192},{24:$VG,28:193,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{27:[1,194],29:[1,195],30:196,31:[1,197]},{38:[1,198]},o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),o($V11,[2,56]),o($V11,[2,57]),{29:[1,199],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{24:$VG,28:203,31:$V21,32:200,33:$V31,36:$V3,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{35:[1,205]},{24:$V41,104:206,105:207},{27:[1,209]},{29:[1,210],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,50]),{24:$VG,28:211,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,147]),{29:[1,212]},{24:$VG,28:213,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{33:[1,214]},o($V51,[2,90]),o($VY,[2,65],{61:$Vz}),o($VZ,[2,69],{55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),o($VZ,[2,70],{55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA}),{83:[1,215]},{80:216,83:$VF},{24:$VG,28:217,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($V$,[2,99]),{80:218,83:$VF},{24:$VG,28:219,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{25:[1,222],27:[1,223],96:[1,220],97:[1,221]},{25:[1,226],27:[1,227],96:[1,224],97:[1,225]},{24:$VG,28:228,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{37:[1,229],41:[1,230]},{25:[1,231],80:232,83:$VF},o($VX,[2,145]),{25:[1,233]},o($VO,$VW),{24:$VG,28:234,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{37:[1,235],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($VJ,[2,47]),o($VQ,[2,122]),o($VQ,[2,124],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),{24:$VG,28:236,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,22]),{27:[1,237],29:[1,238]},{33:[1,239]},{24:$VR,26:240,51:$VS,52:$VT,53:$VU,54:$VV},o($Vq,[2,23]),{33:[1,241]},o([33,37],[2,34],{41:$V61}),o($V71,[2,37]),o($V71,[2,38],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),{24:$VG,28:203,31:$V21,36:$V3,40:243,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{36:[1,244]},{41:[1,246],84:[1,245]},o($VQ,[2,127]),{25:[1,247]},{24:$VG,28:248,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,49]),{29:[1,249],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,148]),o($VX,[2,149],{38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE}),o($V51,[2,89]),{88:250,90:251,91:$V81},o($Vq,[2,98],{81:253,82:[1,254]}),{37:[1,255],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,101]),{29:[1,256],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{24:[1,257]},{24:[1,258]},{24:$VR,26:259,51:$VS,52:$VT,53:$VU,54:$VV},{24:$VG,28:260,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:[1,261]},{24:[1,262]},{24:$VR,26:263,51:$VS,52:$VT,53:$VU,54:$VV},{24:$VG,28:264,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{29:[2,115],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{25:[1,265],80:266,83:$VF},{24:$V01,114:267},{24:$VR,26:268,51:$VS,52:$VT,53:$VU,54:$VV},o($Vq,[2,136]),{24:$VR,26:269,51:$VS,52:$VT,53:$VU,54:$VV},{37:[1,270],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{29:[1,271]},{29:[1,272],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{31:[1,273],34:[1,274]},o($Vq,[2,26]),o([27,29],[2,33]),{39:[1,275]},{29:[1,276]},{24:$VG,28:203,31:$V21,36:$V3,42:277,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{33:[1,278],41:$V61},{24:$VG,28:203,31:$V21,32:279,36:$V3,37:$V31,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{29:[1,280]},{24:$V41,105:281},{24:[1,286],51:[1,284],52:[1,283],53:[1,285],106:282},{29:[1,287],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,51]),{84:[2,108],89:288,90:289,91:$V81,92:[1,290]},o($V91,[2,105]),{24:$VG,28:291,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,95]),{14:293,79:$Vh,80:292,83:$VF},{29:[1,294]},{24:$VG,28:295,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{37:[1,296]},{37:[1,297]},{27:[1,298]},{29:[2,117],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{37:[1,299]},{37:[1,300]},{27:[1,301]},{29:[2,119],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{24:$VR,26:302,51:$VS,52:$VT,53:$VU,54:$VV},o($Vq,[2,134]),o($VX,[2,144]),{80:303,83:$VF},o($VX,[2,146]),{29:[1,304]},o($Vq,[2,46]),o($Vq,[2,21]),{24:$VG,28:203,31:$V21,32:305,33:$V31,36:$V3,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{35:[1,306]},{27:[1,307],29:[1,308]},o($Vq,[2,31]),o($V71,[2,36]),o($V71,[2,39]),{37:[1,309]},o($Vq,[2,125]),o($VQ,[2,126]),o($VQ,[2,128]),o($VQ,[2,129]),o($VQ,[2,130]),o($VQ,[2,131]),o($VQ,[2,132]),o($Vq,[2,48]),{84:[1,310]},o($V91,[2,104]),{25:[1,311]},{25:[1,312],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,96]),o($Vq,[2,97]),o($Vq,[2,102]),{37:[1,313],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},{80:314,83:$VF},{80:315,83:$VF},{24:$VG,28:316,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{80:317,83:$VF},{80:318,83:$VF},{24:$VG,28:319,36:$V3,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{80:320,83:$VF},o($Vq,[2,135]),o($Vq,[2,120]),{33:[1,321]},{36:[1,322]},{31:[1,323],34:[1,324]},o($Vq,[2,29]),{29:[1,325]},o($Vq,[2,103]),{2:$V0,4:326,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},{2:$V0,4:327,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},{80:328,83:$VF},o($Vq,[2,110]),o($Vq,[2,112]),{29:[2,116],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,111]),o($Vq,[2,113]),{29:[2,118],38:$Vu,39:$Vv,55:$Vw,56:$Vx,57:$Vy,61:$Vz,62:$VA,63:$VB,64:$VC,65:$VD,66:$VE},o($Vq,[2,133]),{29:[1,329]},{24:$VG,28:203,31:$V21,32:330,36:$V3,37:$V31,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{24:$VG,28:203,31:$V21,32:331,33:$V31,36:$V3,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},{35:[1,332]},o($Vq,[2,32]),{2:$V0,6:52,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,43:36,48:40,50:$V4,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,84:[2,107],85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp},o($V91,[2,106],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,28:25,43:36,48:40,68:41,69:42,6:52,2:$V0,23:$V1,24:$V2,36:$V3,50:$V4,56:$V5,58:$V6,67:$V7,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh,83:$Vi,85:$Vj,86:$Vk,87:$Vl,93:$Vm,99:$Vn,103:$Vo,107:$Vp}),o($Vq,[2,109]),o($Vq,[2,25]),{37:[1,333]},{33:[1,334]},{36:[1,335]},{29:[1,336]},{29:[1,337]},{24:$VG,28:203,31:$V21,32:338,36:$V3,37:$V31,40:201,42:202,43:84,48:40,56:$V5,58:$V6,67:$V7,68:41,69:42,70:$V8,71:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,83:$Vi},o($Vq,[2,27]),o($Vq,[2,28]),{37:[1,339]},{29:[1,340]},o($Vq,[2,30])],
defaultActions: {51:[2,1],112:[2,88],138:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { OpRelational, OpLogical,OpArithmetic} = require('../tools/abstract/enums');
    const { Arithmetic} = require('../tools/expression/Arithmetic');
    const { Relational } = require('../tools/expression/Relational');
    const { Logical } = require('../tools/expression/Logical');
    const { Access } = require('../tools/expression/Access');
    const { NullEx } = require('../tools/expression/Null');
    const { TypeAccess } = require('../tools/expression/TypeAccess');
    const { Literal } = require('../tools/expression/Literal');
    const { ObjectLiteral } = require('../tools/expression/ObjectLiteral');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { NoType } = require('../tools/sentences/NoType');
    const { TypeNoType } = require('../tools/sentences/TypeNoType');
    const { Console } = require('../tools/sentences/Console');
    const { While } = require('../tools/sentences/While');
    const { DoWhile } = require('../tools/sentences/DoWhile');
    const { IF } = require('../tools/sentences/If');
    const { FOR } = require('../tools/sentences/For');
    const { FORIN } = require('../tools/sentences/ForIn');
    const { FOROF } = require('../tools/sentences/ForOf');
    const { Sentence } = require('../tools/sentences/Sentence');
    const { Switch } = require('../tools/sentences/Switch');
    const { Case } = require('../tools/sentences/Case');
    const { Default } = require('../tools/sentences/Default');
    const { Break } = require('../tools/sentences/Break');
    const { Arrays } = require('../tools/declaration_type/Arrays');
    const { ArrayObject } = require('../tools/declaration_type/ArrayObject');
    const { ArrayParam } = require('../tools/model/ArrayParam');
    const { Pushs } = require('../tools/sentences/Push');
    const { Pop } = require('../tools/sentences/Pop');
    const { TypeValue } = require('../tools/sentences/TypeValue');
    const { Return } = require('../tools/sentences/Return');
    const { Continue } = require('../tools/sentences/Continue');
    const { Type } = require('../tools/sentences/Type');
    const { PrimType } = require('../tools/sentences/PrimType');
    const { Call } = require('../tools/sentences/Call');
    const { Function } = require('../tools/sentences/Function');
    const { Constant } = require('../tools/sentences/Constant');
    const { ErrorProduction } = require('../tools/sentences/ErrorProduction');
    const { LexicoProduccion } = require('../tools/sentences/LexicoProduccion');
    const { ArrayAccess } = require('../tools/expression/ArrayAccess');
        


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 73
break;
case 4:return 71
break;
case 5:return 70
break;
case 6:return 70
break;
case 7:return 70
break;
case 8:return 57
break;
case 9:return 62
break;
case 10:return 56
break;
case 11:return 55
break;
case 12:return 61
break;
case 13:return 59
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 41
break;
case 17:return 45
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 63
break;
case 23:return 64
break;
case 24:return 66
break;
case 25:return 65
break;
case 26:return 67
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 83
break;
case 31:return 84
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 84
break;
case 35:return 84
break;
case 36:return 23
break;
case 37:return 95
break;
case 38:return 50
break;
case 39:return 79
break;
case 40:return 82
break;
case 41:return 87
break;
case 42:return 92
break;
case 43:return 91
break;
case 44:return 85
break;
case 45:return 86
break;
case 46:return 93
break;
case 47:return 99
break;
case 48:return 100
break;
case 49:return 77
break;
case 50:return 78
break;
case 51:return 76
break;
case 52:return 107
break;
case 53:return 51
break;
case 54:return 52
break;
case 55:return 53
break;
case 56:return 74
break;
case 57:return 75
break;
case 58:return 97
break;
case 59:return 96
break;
case 60:return 47
break;
case 61:return 49
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 54
break;
case 65:return 46
break;
case 66:return 103
break;
case 67:return 72
break;
case 68:return 24;
break;
case 69:return 5;
break;
case 70:return new LexicoProduccion(yy_.yytext, "Lexico", yy_.yylloc.first_line, yy_.yylloc.first_column, 2);;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([0-9]+(\.[0-9]+))))/i,/^(?:(([0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:null\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}