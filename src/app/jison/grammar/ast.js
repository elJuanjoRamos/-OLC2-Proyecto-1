/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,24],$V3=[1,41],$V4=[1,22],$V5=[1,37],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,45],$Va=[1,46],$Vb=[1,27],$Vc=[1,26],$Vd=[1,28],$Ve=[1,29],$Vf=[1,47],$Vg=[1,30],$Vh=[1,32],$Vi=[1,31],$Vj=[1,33],$Vk=[1,34],$Vl=[1,23],$Vm=[1,35],$Vn=[2,5,23,24,36,40,65,68,69,70,71,72,74,75,76,77,80,81,83,86,87,89,90,91,97,101,105],$Vo=[29,38,39,48,50,54,55,56,57,58,59,60,61,62,63,64],$Vp=[2,45],$Vq=[1,57],$Vr=[1,66],$Vs=[1,67],$Vt=[1,59],$Vu=[1,60],$Vv=[1,61],$Vw=[1,62],$Vx=[1,63],$Vy=[1,64],$Vz=[1,65],$VA=[1,68],$VB=[1,69],$VC=[1,70],$VD=[1,71],$VE=[1,77],$VF=[1,82],$VG=[2,82],$VH=[1,87],$VI=[25,29,33,37,38,39,42,54,55,56,57,58,59,60,61,62,63,64,81],$VJ=[1,92],$VK=[2,44],$VL=[1,101],$VM=[25,29,33,37,38,39,42,48,50,54,55,56,57,58,59,60,61,62,63,64,81],$VN=[25,29,33,37,38,39,42,50,54,55,56,57,58,59,60,61,62,63,64,81],$VO=[42,81],$VP=[1,149],$VQ=[1,150],$VR=[1,151],$VS=[37,42],$VT=[25,29,33,37,38,39,42,54,55,61,62,63,64,81],$VU=[25,29,33,37,38,39,42,54,55,56,57,61,62,63,64,81],$VV=[25,29,33,37,38,39,42,61,62,63,64,81],$VW=[25,29,33,37,42,61,62,63,64,81],$VX=[2,5,23,24,36,40,65,68,69,70,71,72,74,75,76,77,80,81,82,83,86,87,89,90,91,97,101,105],$VY=[1,181],$VZ=[27,29,31,37,39,42,80],$V_=[1,196],$V$=[2,36],$V01=[1,202],$V11=[25,29,31,33,37,38,39,42,46,48,50,54,55,56,57,58,59,60,61,62,63,64,81],$V21=[1,235],$V31=[33,37,42],$V41=[1,247],$V51=[81,89,90];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"LET_DECLARATION":7,"CONST_DECLARATION":8,"TYPE_DECLARATION":9,"DECLARATION_NOTYPE":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"CALL_FUNCTION":20,"FUNCTIONS":21,"PUSH":22,"RESERV_LET":23,"ID":24,":":25,"TIPO":26,"=":27,"EXPRESSION":28,";":29,"ARRAY":30,"[":31,"NULLORDATA":32,"]":33,"RESERV_NEW":34,"RESERV_ARRAY":35,"(":36,")":37,"<":38,">":39,"RESERV_CONST":40,"ARRAY_CONTENT":41,",":42,"MORE_ARRAY":43,"PRODUCCION_ID":44,"MATRIZ_IDEN":45,".":46,"RESERV_LENGTH":47,"RESERV_PUSH":48,"POP":49,"RESERV_POP":50,"RESERV_STRING":51,"RESERV_NUMBER":52,"RESERV_BOOLEAN":53,"+":54,"-":55,"*":56,"/":57,"%":58,"^":59,"**":60,"==":61,"!=":62,"&&":63,"||":64,"!":65,"IDENTIFICADOR":66,"JSON_EXPRESSION":67,"CADENA":68,"NUMERO":69,"DECIMAL":70,"RESERV_TRUE":71,"RESERV_FALSE":72,"IDEN_ARRAY":73,"RESERV_CONTINUE":74,"RESERV_BREAK":75,"RESERV_RETURN":76,"RESERV_IF":77,"SENTENCIA":78,"ELSEIF":79,"{":80,"}":81,"RESERV_ELSE":82,"RESERV_SWITCH":83,"CASES":84,"DEFAULT":85,"RESERV_DO":86,"RESERV_WHILE":87,"CASE":88,"RESERV_CASE":89,"RESERV_DEFAULT":90,"RESERV_FOR":91,"DECLA_FOR":92,"RESERV_VAR":93,"RESERV_IN":94,"RESERV_OF":95,"FOR_DECLARATION":96,"RESERV_CONSOLE":97,"RESERV_LOG":98,"OBJECTS":99,"OBJECT":100,"RESERV_TYPE":101,"PRIMITIVE_DATAS":102,"PRIMITIVE_DATA":103,"TYPE_TIPO":104,"RESERV_FUNCTION":105,"PARAMETERS":106,"PATAMETERS":107,"FUNCTION_SENTENCE":108,"CHILDFUNCTION":109,"CHILD_FUNCTION":110,"NEW_INSTRUCTION":111,"PR_FUNCTION":112,"PARAMS":113,"CALL_PARAMS":114,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"RESERV_LET",24:"ID",25:":",27:"=",29:";",31:"[",33:"]",34:"RESERV_NEW",35:"RESERV_ARRAY",36:"(",37:")",38:"<",39:">",40:"RESERV_CONST",42:",",46:".",47:"RESERV_LENGTH",48:"RESERV_PUSH",50:"RESERV_POP",51:"RESERV_STRING",52:"RESERV_NUMBER",53:"RESERV_BOOLEAN",54:"+",55:"-",56:"*",57:"/",58:"%",59:"^",60:"**",61:"==",62:"!=",63:"&&",64:"||",65:"!",68:"CADENA",69:"NUMERO",70:"DECIMAL",71:"RESERV_TRUE",72:"RESERV_FALSE",74:"RESERV_CONTINUE",75:"RESERV_BREAK",76:"RESERV_RETURN",77:"RESERV_IF",80:"{",81:"}",82:"RESERV_ELSE",83:"RESERV_SWITCH",86:"RESERV_DO",87:"RESERV_WHILE",89:"RESERV_CASE",90:"RESERV_DEFAULT",91:"RESERV_FOR",93:"RESERV_VAR",94:"RESERV_IN",95:"RESERV_OF",97:"RESERV_CONSOLE",98:"RESERV_LOG",101:"RESERV_TYPE",105:"RESERV_FUNCTION",106:"PARAMETERS",112:"PR_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,7],[7,5],[7,5],[7,3],[7,10],[7,6],[7,12],[7,12],[7,8],[7,14],[7,7],[7,9],[8,7],[8,5],[32,1],[32,0],[41,3],[41,1],[43,1],[43,3],[44,3],[44,2],[44,3],[44,2],[44,1],[22,6],[49,4],[10,4],[10,6],[10,2],[26,1],[26,1],[26,1],[30,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,4],[28,4],[28,3],[28,3],[28,3],[28,3],[28,2],[28,3],[28,3],[28,1],[28,1],[28,1],[66,3],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[45,4],[45,3],[73,1],[73,1],[12,2],[11,2],[13,2],[13,3],[14,6],[78,3],[78,2],[79,2],[79,2],[79,0],[15,8],[17,7],[84,2],[84,1],[16,5],[88,4],[85,3],[85,0],[18,9],[18,8],[18,8],[18,8],[18,8],[92,1],[92,3],[96,6],[96,4],[96,6],[96,4],[19,7],[67,3],[99,3],[99,1],[100,3],[9,7],[102,3],[102,1],[103,3],[104,1],[104,1],[104,1],[104,1],[21,8],[21,6],[21,7],[21,5],[108,3],[108,2],[109,2],[110,5],[110,6],[111,2],[111,0],[107,3],[107,1],[113,3],[20,4],[20,5],[114,3],[114,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node) };
        return this.$;
    
break;
case 2:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node) };
    
break;
case 3:

        this.$ = { node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 39: case 73: case 74: case 75: case 100: case 119:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 19: case 51: case 126:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 20:

        this.$ = {node: newNode(yy, yystate, 'error')};
     
    
break;
case 21: case 33:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 22: case 23: case 34:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 24:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 25:

        this.$ = {node: newNode(yy, yystate, $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1],$$[$0])};
    
break;
case 26:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 27:

        this.$ = {node: newNode(yy, yystate, $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8].node, $$[$0-7].node, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 28:

        this.$ = {node: newNode(yy, yystate, $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 29:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-13], $$[$0-12], $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8].node, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 35: case 110:
 this.$ = {node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 36:
 this.$ = null 
break;
case 37:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0].node)};
    
break;
case 38:

         this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
    
break;
case 40:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};  
    
break;
case 41:
  this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};   
break;
case 42:
  this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};   
break;
case 43:
  this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};   
break;
case 44:
  this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};   
break;
case 45:
  this.$ = {node: newNode(yy, yystate, $$[$0])};   
break;
case 46:

         this.$ = {node: newNode(yy, yystate, $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};  
    
break;
case 47:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2], $$[$0-1], $$[$0])};  
    
break;
case 48:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};  
    
break;
case 49:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node)};  
    
break;
case 50:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0])};  
    
break;
case 52: case 53: case 125: case 127: case 128:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 54:
 this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])}; 
break;
case 55: case 56: case 57: case 58: case 59: case 60: case 61: case 62: case 63: case 66: case 67: case 68: case 69: case 118:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 64: case 65:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "<=", $$[$0].node)};
    
break;
case 70: case 94: case 95:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 71: case 72:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 76: case 90: case 92: case 117:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 77:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1)
        };
    
break;
case 78: case 79:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
        };
    
break;
case 80: case 81:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
        };
    
break;
case 82:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0].node),
            ejecutar: new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
        };
    
break;
case 83:
 
         this.$ = {node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 84:
 
       this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 85: case 86:
 
         this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 87: case 88: case 89: case 93:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 91:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 96: case 104: case 139:

        this.$ = null;
    
break;
case 97:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 98:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 99:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 101:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 102:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 103: case 120: case 124:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 105:

         this.$ = {node: newNode(yy, yystate, $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 106: case 107: case 108:

         this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 109:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 111:
 this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)}; 
break;
case 112:

         this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 113: case 115:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 114:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 116:

        this.$ = {
            node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0]),
            ejecutar: new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
        };
    
break;
case 121:

         this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 122:

         this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 123:

         this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 129:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0].node)}; 
    
break;
case 130:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};    
    
break;
case 131:

         this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0].node)}; 
    
break;
case 132:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};    
    
break;
case 133:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])}; 
    
break;
case 134:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0], $$[$01])}; 
    
break;
case 135: case 138:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)}; 
    
break;
case 136:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)}; 
    
break;
case 137:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node,$$[$0-1], $$[$0].node)}; 
    
break;
case 140:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node,$$[$0-1], $$[$0].node)}; 
    
break;
case 141:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)}; 
    
break;
case 142:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)}; 
    
break;
case 143:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])}; 
    
break;
case 144:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])}; 
    
break;
case 145:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 146:

        this.$ = [$$[$0]]
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{1:[3]},{2:$V0,5:[1,48],6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($Vn,[2,3]),o($Vn,[2,4]),o($Vn,[2,5]),o($Vn,[2,6]),o($Vn,[2,7]),o($Vn,[2,8]),o($Vn,[2,9]),o($Vn,[2,10]),o($Vn,[2,11]),o($Vn,[2,12]),o($Vn,[2,13]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($Vn,[2,20]),{24:[1,50]},{24:[1,51]},{24:[1,52]},o($Vo,$Vp,{45:56,27:[1,53],31:$Vq,36:[1,55],46:[1,54]}),{29:[1,58],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{29:[1,72]},{29:[1,73]},{24:$VE,28:75,29:[1,74],36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{36:[1,78]},{36:[1,79]},{36:[1,80]},{78:81,80:$VF},{36:[1,83]},{46:[1,84]},{24:[1,85]},o([29,38,39,54,55,56,57,58,59,60,61,62,63,64],$VG,{48:[1,86],50:$VH}),{24:$VE,28:88,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VI,[2,73]),o($VI,[2,74]),o($VI,[2,75]),{24:$VE,28:89,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VI,[2,77]),o($VI,[2,78]),o($VI,[2,79]),o($VI,[2,80]),o($VI,[2,81]),{24:$VJ,99:90,100:91},{1:[2,1]},o($Vn,[2,2]),{25:[1,93],27:[1,94],29:[1,95]},{25:[1,96],27:[1,97]},{27:[1,98]},{24:$VE,28:99,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vo,$VK,{24:[1,100],47:$VL}),{24:$VE,28:104,36:$V3,37:[1,102],44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf,114:103},o($VM,[2,42],{31:[1,106],46:[1,105]}),{24:$VE,36:$V3,44:108,66:107,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},o($Vn,[2,50]),{24:$VE,28:109,36:$V3,44:76,49:38,54:[1,110],65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:111,36:$V3,44:76,49:38,55:[1,112],65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:113,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:114,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:115,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:116,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:117,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,27:[1,119],28:118,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,27:[1,121],28:120,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:122,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:123,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:124,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:125,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,88]),o($Vn,[2,87]),o($Vn,[2,89]),{29:[1,126],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($VI,$VG,{50:$VH}),o($VN,$Vp,{45:56,31:$Vq,46:[1,127]}),{24:$VE,28:128,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:129,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:130,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{87:[1,131]},{2:$V0,4:132,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[1,133],83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{23:[1,136],24:[1,138],92:134,93:[1,135],96:137},{98:[1,139]},{36:[1,140]},{36:[1,141]},{36:[1,142]},o($VI,[2,70]),{37:[1,143],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{42:[1,145],81:[1,144]},o($VO,[2,119]),{25:[1,146]},{26:147,35:[1,148],51:$VP,52:$VQ,53:$VR},{24:$VE,28:152,31:[1,153],34:[1,154],36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,24]),{26:155,51:$VP,52:$VQ,53:$VR},{24:$VE,28:156,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{80:[1,157]},{29:[1,158],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{27:[1,159]},o($VM,[2,43]),{29:[1,160]},{37:[1,161],42:[1,162]},o($VS,[2,146],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD}),o($VM,[2,41]),{24:$VE,36:$V3,44:108,66:163,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va},{33:[1,164]},{33:$VG},o($VT,[2,55],{56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),o($VI,[2,71]),o($VT,[2,56],{56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),o($VI,[2,72]),o($VU,[2,57],{58:$Vx,59:$Vy,60:$Vz}),o($VU,[2,58],{58:$Vx,59:$Vy,60:$Vz}),o($VI,[2,59]),o($VI,[2,60]),o($VI,[2,61]),o($VV,[2,62],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),{24:$VE,28:165,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VV,[2,63],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),{24:$VE,28:166,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VW,[2,66],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),o($VW,[2,67],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),o([25,29,33,37,42,63,64,81],[2,68],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB}),o([25,29,33,37,42,64,81],[2,69],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Vn,[2,90]),o($VN,$VK,{47:$VL}),{37:[1,167],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{37:[1,168],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{37:[1,169],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{36:[1,170]},{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[1,171],83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($VX,[2,93]),{29:[1,172]},{24:[1,173]},{24:[1,174]},{29:[2,110]},{27:[1,175]},{36:[1,176]},{24:$VY,37:[1,179],106:[1,177],107:178,113:180},{24:$VE,28:182,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,183]},o($VI,[2,76]),o($VI,[2,117]),{24:$VJ,100:184},{24:$VE,28:185,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{27:[1,186],29:[1,187],30:188,31:[1,189]},{38:[1,190]},o($VZ,[2,51]),o($VZ,[2,52]),o($VZ,[2,53]),{29:[1,191],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{24:$VE,28:195,31:$V_,32:192,33:$V$,36:$V3,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,197]},{27:[1,198]},{29:[1,199],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{24:$V01,102:200,103:201},o($Vn,[2,48]),{24:$VE,28:203,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,143]),{29:[1,204]},{24:$VE,28:205,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{33:[1,206]},o($V11,[2,84]),o($VV,[2,64],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),o($VV,[2,65],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz}),{78:207,80:$VF},{80:[1,208]},{78:209,80:$VF},{24:$VE,28:210,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($VX,[2,92]),{24:$VE,28:211,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{25:[1,214],27:[1,215],94:[1,212],95:[1,213]},{25:[1,218],27:[1,219],94:[1,216],95:[1,217]},{24:$VE,28:220,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:221,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,222]},{37:[1,223],42:[1,224]},{25:[1,225],78:226,80:$VF},o($VS,[2,141]),{25:[1,227]},{37:[1,228],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($VI,[2,47]),o($VO,[2,118]),o($VO,[2,120],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD}),{24:$VE,28:229,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,22]),{27:[1,230],29:[1,231]},{33:[1,232]},{26:233,51:$VP,52:$VQ,53:$VR},o($Vn,[2,23]),{33:[1,234]},o([33,37],[2,35],{42:$V21}),o($V31,[2,38]),o($V31,[2,39],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD}),{24:$VE,28:195,31:$V_,36:$V3,41:236,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{36:[1,237]},{24:$VE,28:238,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,34]),{42:[1,240],81:[1,239]},o($VO,[2,123]),{25:[1,241]},{29:[1,242],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($Vn,[2,144]),o($VS,[2,145],{38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD}),o($V11,[2,83]),o($Vn,[2,96],{79:243,82:[1,244]}),{84:245,88:246,89:$V41},o($Vn,[2,101]),{37:[1,248],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{29:[1,249],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{24:[1,250]},{24:[1,251]},{26:252,51:$VP,52:$VQ,53:$VR},{24:$VE,28:253,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:[1,254]},{24:[1,255]},{26:256,51:$VP,52:$VQ,53:$VR},{24:$VE,28:257,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[2,111],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{37:[1,258],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{25:[1,259]},{78:260,80:$VF},{24:$VY,113:261},{26:262,51:$VP,52:$VQ,53:$VR},o($Vn,[2,132]),{26:263,51:$VP,52:$VQ,53:$VR},{29:[1,264]},{29:[1,265],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{31:[1,266],34:[1,267]},o($Vn,[2,26]),o([27,29],[2,54]),{39:[1,268]},{29:[1,269]},{24:$VE,28:195,31:$V_,36:$V3,43:270,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{33:[1,271],42:$V21},{24:$VE,28:195,31:$V_,32:272,36:$V3,37:$V$,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[1,273],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{29:[1,274]},{24:$V01,103:275},{24:[1,280],51:[1,278],52:[1,277],53:[1,279],104:276},o($Vn,[2,49]),o($Vn,[2,91]),{14:282,77:$Ve,78:281,80:$VF},{81:[2,104],85:283,88:284,89:$V41,90:[1,285]},o($V51,[2,100]),{24:$VE,28:286,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{29:[1,287]},{24:$VE,28:288,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{37:[1,289]},{37:[1,290]},{27:[1,291]},{29:[2,113],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{37:[1,292]},{37:[1,293]},{27:[1,294]},{29:[2,115],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{29:[1,295]},{26:296,51:$VP,52:$VQ,53:$VR},o($Vn,[2,130]),o($VS,[2,140]),{78:297,80:$VF},o($VS,[2,142]),o($Vn,[2,46]),o($Vn,[2,21]),{24:$VE,28:195,31:$V_,32:298,33:$V$,36:$V3,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,299]},{27:[1,300],29:[1,301]},o($Vn,[2,31]),o($V31,[2,37]),o($V31,[2,40]),{37:[1,302]},o($Vn,[2,33]),o($Vn,[2,121]),o($VO,[2,122]),o($VO,[2,124]),o($VO,[2,125]),o($VO,[2,126]),o($VO,[2,127]),o($VO,[2,128]),o($Vn,[2,94]),o($Vn,[2,95]),{81:[1,303]},o($V51,[2,99]),{25:[1,304]},{25:[1,305],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($Vn,[2,98]),{37:[1,306],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},{78:307,80:$VF},{78:308,80:$VF},{24:$VE,28:309,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{78:310,80:$VF},{78:311,80:$VF},{24:$VE,28:312,36:$V3,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,116]),{78:313,80:$VF},o($Vn,[2,131]),{33:[1,314]},{36:[1,315]},{31:[1,316],34:[1,317]},o($Vn,[2,29]),{29:[1,318]},o($Vn,[2,97]),{2:$V0,4:319,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{2:$V0,4:320,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},{78:321,80:$VF},o($Vn,[2,106]),o($Vn,[2,108]),{29:[2,112],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($Vn,[2,107]),o($Vn,[2,109]),{29:[2,114],38:$Vr,39:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC,64:$VD},o($Vn,[2,129]),{29:[1,322]},{24:$VE,28:195,31:$V_,32:323,36:$V3,37:$V$,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{24:$VE,28:195,31:$V_,32:324,33:$V$,36:$V3,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},{35:[1,325]},o($Vn,[2,32]),{2:$V0,6:49,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,23:$V1,24:$V2,28:25,36:$V3,40:$V4,44:36,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,81:[2,103],83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm},o($V51,[2,102],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:19,28:25,44:36,49:38,66:39,67:40,6:49,2:$V0,23:$V1,24:$V2,36:$V3,40:$V4,65:$V5,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,74:$Vb,75:$Vc,76:$Vd,77:$Ve,80:$Vf,83:$Vg,86:$Vh,87:$Vi,91:$Vj,97:$Vk,101:$Vl,105:$Vm}),o($Vn,[2,105]),o($Vn,[2,25]),{37:[1,326]},{33:[1,327]},{36:[1,328]},{29:[1,329]},{29:[1,330]},{24:$VE,28:195,31:$V_,32:331,36:$V3,37:$V$,41:193,43:194,44:76,49:38,65:$V5,66:39,67:40,68:$V6,69:$V7,70:$V8,71:$V9,72:$Va,80:$Vf},o($Vn,[2,27]),o($Vn,[2,28]),{37:[1,332]},{29:[1,333]},o($Vn,[2,30])],
defaultActions: {48:[2,1],108:[2,82],137:[2,110]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { Console } = require('../tools/sentences/Console');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 70
break;
case 4:return 69
break;
case 5:return 68
break;
case 6:return 68
break;
case 7:return 68
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 55
break;
case 11:return 54
break;
case 12:return 58
break;
case 13:return 59
break;
case 14:return 29
break;
case 15:return 25
break;
case 16:return 42
break;
case 17:return 46
break;
case 18:return 38
break;
case 19:return 39
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 61
break;
case 23:return 62
break;
case 24:return 64
break;
case 25:return 63
break;
case 26:return 65
break;
case 27:return 27
break;
case 28:return 36
break;
case 29:return 37 
break;
case 30:return 80
break;
case 31:return 81
break;
case 32:return 31
break;
case 33:return 33
break;
case 34:return 81
break;
case 35:return 81
break;
case 36:return 23
break;
case 37:return 93
break;
case 38:return 40
break;
case 39:return 77
break;
case 40:return 82
break;
case 41:return 83
break;
case 42:return 90
break;
case 43:return 89
break;
case 44:return 87
break;
case 45:return 86
break;
case 46:return 91
break;
case 47:return 97
break;
case 48:return 98
break;
case 49:return 75
break;
case 50:return 74
break;
case 51:return 76
break;
case 52:return 105
break;
case 53:return 51
break;
case 54:return 52
break;
case 55:return 53
break;
case 56:return 71
break;
case 57:return 72
break;
case 58:return 95
break;
case 59:return 94
break;
case 60:return 48
break;
case 61:return 50
break;
case 62:return 34
break;
case 63:return 35
break;
case 64:return 'RESERV_ANY'
break;
case 65:return 47
break;
case 66:return 101
break;
case 67:return 24;
break;
case 68:return 5;
break;
case 69:return 'DESCONICIDO';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([-]?[0-9]+(\.[0-9]+))))/i,/^(?:(([-]?[0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = ast;
exports.Parser = ast.Parser;
exports.parse = function () { return ast.parse.apply(ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}