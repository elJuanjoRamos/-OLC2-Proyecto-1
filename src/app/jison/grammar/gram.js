/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gram = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,19],$V2=[1,21],$V3=[1,20],$V4=[1,22],$V5=[1,23],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,28],$Va=[1,26],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[5,7,22,23,39,72,73,74,75,79,81,82,83,87,88,89,96,98],$Vf=[1,53],$Vg=[1,47],$Vh=[1,43],$Vi=[1,48],$Vj=[1,49],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,58],$Vo=[1,68],$Vp=[1,69],$Vq=[1,70],$Vr=[1,82],$Vs=[1,83],$Vt=[1,76],$Vu=[1,77],$Vv=[1,78],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,87],$VD=[24,28,32,36,37,38,41,54,55,56,57,58,59,60,61,62,63],$VE=[24,28,32,36,37,38,41,50,54,55,56,57,58,59,60,61,62,63],$VF=[1,116],$VG=[26,28,30,36,38,41],$VH=[36,41],$VI=[5,7,22,23,39,72,73,74,75,79,80,81,82,83,87,88,89,96,98],$VJ=[1,157],$VK=[1,167],$VL=[2,34],$VM=[24,28,32,36,37,38,41,54,55,60,61,62,63],$VN=[24,28,32,36,37,38,41,54,55,56,57,60,61,62,63],$VO=[24,28,32,36,37,38,41,60,61,62,63],$VP=[24,28,32,36,41,60,61,62,63],$VQ=[1,189],$VR=[1,190],$VS=[1,198],$VT=[1,200],$VU=[1,207],$VV=[32,36,41],$VW=[24,28,30,32,36,37,38,41,45,50,54,55,56,57,58,59,60,61,62,63],$VX=[1,218],$VY=[1,232],$VZ=[79,87,88],$V_=[2,119],$V$=[79,98];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"VAR_DECLARATION":7,"LET_DECLARATION":8,"CONST_DECLARATION":9,"DECLARATION_NOTYPE":10,"BREAK":11,"CONTINUE":12,"RETURN":13,"IF":14,"SWITCH":15,"WHILE":16,"DOWHILE":17,"FOR":18,"CONSOLE":19,"CALL_FUNCTION":20,"FUNCTIONS":21,"RESERV_LET":22,"ID":23,":":24,"TIPO":25,"=":26,"EXPRESSION":27,";":28,"ARRAY":29,"[":30,"NULLORDATA":31,"]":32,"RESERV_NEW":33,"RESERV_ARRAY":34,"(":35,")":36,"<":37,">":38,"RESERV_CONST":39,"ARRAY_CONTENT":40,",":41,"MORE_ARRAY":42,"PRODUCCION_ID":43,"MATRIZ_IDEN":44,".":45,"RESERV_LENGTH":46,"PUSH":47,"RESERV_PUSH":48,"POP":49,"RESERV_POP":50,"RESERV_STRING":51,"RESERV_NUMBER":52,"RESERV_BOOLEAN":53,"+":54,"-":55,"*":56,"/":57,"%":58,"^":59,"==":60,"!=":61,"&&":62,"||":63,"!":64,"IDENTIFICADOR":65,"CADENA":66,"NUMERO":67,"DECIMAL":68,"RESERV_TRUE":69,"RESERV_FALSE":70,"IDEN_ARRAY":71,"RESERV_BREAK":72,"RESERV_CONTINUE":73,"RESERV_RETURN":74,"RESERV_IF":75,"SENTENCIA":76,"ELSEIF":77,"{":78,"}":79,"RESERV_ELSE":80,"RESERV_WHILE":81,"RESERV_DO":82,"RESERV_SWITCH":83,"CASES":84,"DEFAULT":85,"CASE":86,"RESERV_CASE":87,"RESERV_DEFAULT":88,"RESERV_FOR":89,"FOREXP":90,"TIPOFOR":91,"RESERV_VAR":92,"DECLARACION_FOR":93,"RESERV_OF":94,"RESERV_IN":95,"RESERV_CONSOLE":96,"RESERV_LOG":97,"RESERV_FUNCTION":98,"SENTENCIA_FUNCION":99,"PARAMETROS":100,"FUNCIONHIJA":101,"FUNCION_HIJA":102,"OTRA_INSTRUCCION":103,"PARAMETRO":104,"PARAMETROS_LLAMADA":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"VAR_DECLARATION",22:"RESERV_LET",23:"ID",24:":",26:"=",28:";",30:"[",32:"]",33:"RESERV_NEW",34:"RESERV_ARRAY",35:"(",36:")",37:"<",38:">",39:"RESERV_CONST",41:",",45:".",46:"RESERV_LENGTH",48:"RESERV_PUSH",50:"RESERV_POP",51:"RESERV_STRING",52:"RESERV_NUMBER",53:"RESERV_BOOLEAN",54:"+",55:"-",56:"*",57:"/",58:"%",59:"^",60:"==",61:"!=",62:"&&",63:"||",64:"!",66:"CADENA",67:"NUMERO",68:"DECIMAL",69:"RESERV_TRUE",70:"RESERV_FALSE",71:"IDEN_ARRAY",72:"RESERV_BREAK",73:"RESERV_CONTINUE",74:"RESERV_RETURN",75:"RESERV_IF",78:"{",79:"}",80:"RESERV_ELSE",81:"RESERV_WHILE",82:"RESERV_DO",83:"RESERV_SWITCH",87:"RESERV_CASE",88:"RESERV_DEFAULT",89:"RESERV_FOR",92:"RESERV_VAR",94:"RESERV_OF",95:"RESERV_IN",96:"RESERV_CONSOLE",97:"RESERV_LOG",98:"RESERV_FUNCTION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[8,7],[8,5],[8,5],[8,3],[8,10],[8,6],[8,12],[8,12],[8,8],[8,14],[8,7],[8,9],[9,7],[9,5],[31,1],[31,0],[40,3],[40,1],[42,1],[42,3],[43,3],[43,2],[43,3],[43,2],[43,1],[47,6],[49,4],[10,6],[10,7],[10,4],[25,1],[25,1],[25,1],[29,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,4],[27,4],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,1],[27,1],[65,3],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1],[44,4],[44,3],[11,2],[12,2],[13,2],[13,3],[14,6],[76,3],[76,2],[77,2],[77,2],[77,0],[16,5],[17,7],[15,8],[84,2],[84,1],[86,4],[85,3],[85,0],[18,5],[90,4],[90,4],[90,4],[90,5],[91,1],[91,1],[93,6],[93,4],[93,6],[93,4],[19,7],[21,5],[21,6],[99,3],[99,2],[101,2],[102,5],[102,6],[103,2],[103,0],[100,3],[100,1],[104,3],[20,4],[20,5],[105,3],[105,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node) };
        return this.$;
    
break;
case 2:

        this.$ = { node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node) };
    
break;
case 3:

        this.$ = { node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 4:

        this.$ = { node: newNode(yy, yystate, $$[$0].node) };
    
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 37: case 70: case 71: case 95: case 126:

        this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
break;
case 18: case 49: case 104:

        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 19: case 31:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 20: case 21: case 32:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 22:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 23:

        this.$ = {node: newNode(yy, yystate, $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1],$$[$0])};
    
break;
case 24:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
    
break;
case 25:

        this.$ = {node: newNode(yy, yystate, $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8].node, $$[$0-7].node, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 26:

        this.$ = {node: newNode(yy, yystate, $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8], $$[$0-7], $$[$0-6].node, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 27:

        this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 28:

        this.$ = {node: newNode(yy, yystate, $$[$0-13], $$[$0-12], $$[$0-11], $$[$0-10], $$[$0-9], $$[$0-8].node, $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 29:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0], $$[$01])};
    
break;
case 30:

        this.$ = {node: newNode(yy, yystate, $$[$0-8], $$[$0-7], $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 33:
 this.$ = {node: newNode(yy, yystate, $$[$0].node)}; 
break;
case 34:
 this.$ = null 
break;
case 35:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0].node)};
    
break;
case 36:

         this.$ = {node: newNode(yy, yystate, $$[$0].node)};
    
    
break;
case 38:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};  
    
break;
case 39:
  this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};   
break;
case 40:
  this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};   
break;
case 41:
  this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0])};   
break;
case 42:
  this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};   
break;
case 43:
  this.$ = {node: newNode(yy, yystate, $$[$0])};   
break;
case 44:

         this.$ = {node: newNode(yy, yystate, $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};  
    
break;
case 45:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2], $$[$0-1], $$[$0])};  
    
break;
case 46:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 47:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4].node, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 48: case 101: case 102:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 50: case 51: case 105:
 
        this.$ = {node: newNode(yy, yystate, $$[$0])};
    
break;
case 52:
 this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])}; 
break;
case 53: case 54: case 55: case 56: case 57: case 58: case 59: case 60: case 63: case 64: case 65: case 66: case 125:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 61: case 62:

        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, "<=", $$[$0].node)};
    
break;
case 67: case 88: case 89:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0].node)};
    
break;
case 68: case 69:

        this.$ = {node: newNode(yy, yystate, $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 72: case 84: case 86:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 73:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1)
        };
    
break;
case 74: case 75:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0)
        };
    
break;
case 76: case 77:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0]),
            ejecutar: new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2)
        };
    
break;
case 78:
 
        this.$ = {
            node: newNode(yy, yystate, $$[$0].node),
            ejecutar: new Access($$[$0], _$[$0].first_line, _$[$0].first_column)
        };
    
break;
case 79:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 80:
 
        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 81: case 82: case 83: case 87:

        this.$ = {node: newNode(yy, yystate, $$[$0-1], $$[$0])};
    
break;
case 85:

        if($$[$0] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node)};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3].node, $$[$0-2], $$[$0-1].node, $$[$0].node)};
        }
    
break;
case 90: case 98:

        this.$ = null;
    
break;
case 91: case 99:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 92:

        this.$ = {node: newNode(yy, yystate, $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
case 93:

        if($$[$0-1] == undefined) {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0])};
        } else {
            this.$ = {node: newNode(yy, yystate, $$[$0-7], $$[$0-6], $$[$0-5].node, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1].node, $$[$0])};
        }
    
break;
case 94:

        this.$ = {node: newNode(yy, yystate, $$[$0-1].node, $$[$0].node)};
    
break;
case 96:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 97:

        this.$ = {node: newNode(yy, yystate, $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 100:

       this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1].node, $$[$0])};
    
break;
case 103:

        this.$ = {node: newNode(yy, yystate, $$[$0-4].node, $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 106: case 108:

        this.$ = {node: newNode(yy, yystate, $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0].node)};
    
break;
case 107: case 109:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0].node)};
    
break;
case 110:

        this.$ = {
            node: newNode(yy, yystate, $$[$0-6], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0]),
            ejecutar: new Console($$[$0-2], _$[$0-6].first_line, _$[$0-6].first_column)
        };
    
break;
case 111: case 116:

        this.$ = $$[$0-4];
    
break;
case 112: case 117:

        this.$ = $$[$0-5];
    
break;
case 113: case 120: case 122:

        this.$ = $$[$0-2];
    
break;
case 114: case 115: case 118:

        this.$ = $$[$0-1];
    
break;
case 119: case 121:

        this.$ = $$[$0];
    
break;
case 123:

        this.$ = {node: newNode(yy, yystate, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0])};
    
break;
case 124:

        this.$ = {node: newNode(yy, yystate, $$[$0-4], $$[$0-3], $$[$0-2].node, $$[$0-1], $$[$0])};
    
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},{1:[3]},{5:[1,32],6:33,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),{23:[1,34]},{23:[1,35]},{24:[1,36],26:[1,37],35:[1,38]},{28:[1,39]},{28:[1,40]},{23:$Vf,27:42,28:[1,41],35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{35:[1,54]},{35:[1,55]},{35:[1,56]},{76:57,78:$Vn},{35:[1,59]},{45:[1,60]},{23:[1,61]},{1:[2,1]},o($Ve,[2,2]),{24:[1,62],26:[1,63],28:[1,64]},{24:[1,65],26:[1,66]},{25:67,51:$Vo,52:$Vp,53:$Vq},{23:$Vf,27:71,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:74,35:$Vg,36:[1,72],43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm,105:73},o($Ve,[2,81]),o($Ve,[2,82]),o($Ve,[2,83]),{28:[1,75],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{23:$Vf,27:88,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VD,[2,70]),o($VD,[2,71]),o($VD,[2,78],{50:[1,89]}),{23:$Vf,27:90,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VD,[2,73]),o($VD,[2,74]),o($VD,[2,75]),o($VD,[2,76]),o($VD,[2,77]),o($VE,[2,43],{44:91,30:[1,93],45:[1,92]}),{23:$Vf,27:94,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:95,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:96,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{81:[1,97]},{4:98,6:3,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,79:[1,99],81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},{22:[1,101],39:[1,103],90:100,92:[1,102],93:104},{97:[1,105]},{35:[1,106]},{25:107,34:[1,108],51:$Vo,52:$Vp,53:$Vq},{23:$Vf,27:109,30:[1,110],33:[1,111],35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Ve,[2,22]),{25:112,51:$Vo,52:$Vp,53:$Vq},{23:$Vf,27:113,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{26:[1,114],29:115,30:$VF},o($VG,[2,49]),o($VG,[2,50]),o($VG,[2,51]),{28:[1,117],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{28:[1,118]},{36:[1,119],41:[1,120]},o($VH,[2,126],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($Ve,[2,84]),{23:$Vf,27:121,35:$Vg,43:46,49:44,54:[1,122],64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:123,35:$Vg,43:46,49:44,55:[1,124],64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:125,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:126,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:127,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:128,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,26:[1,130],27:129,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,26:[1,132],27:131,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:133,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:134,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:135,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:136,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VD,[2,67]),{35:[1,137]},{36:[1,138],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($VE,[2,40],{30:[1,140],45:[1,139]}),o($VE,[2,42],{46:[1,141]}),{71:[1,142]},{36:[1,143],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{36:[1,144],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{36:[1,145],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{35:[1,146]},{6:33,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,79:[1,147],81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},o($VI,[2,87]),{36:[1,148]},{23:[1,149]},{23:[1,150]},{23:[1,151]},{28:[1,152]},{35:[1,153]},{23:$VJ,36:[1,154],100:155,104:156},{26:[1,158],28:[1,159],29:160,30:$VF},{37:[1,161]},{28:[1,162],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{23:$Vf,27:166,30:$VK,31:163,32:$VL,35:$Vg,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{34:[1,168]},{26:[1,169]},{28:[1,170],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{23:$Vf,27:171,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{26:[1,172]},{32:[1,173]},o($Ve,[2,48]),o($Ve,[2,123]),{28:[1,174]},{23:$Vf,27:175,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VM,[2,53],{56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o($VD,[2,68]),o($VM,[2,54],{56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o($VD,[2,69]),o($VN,[2,55],{58:$Vx,59:$Vy}),o($VN,[2,56],{58:$Vx,59:$Vy}),o($VD,[2,57]),o($VD,[2,58]),o($VO,[2,59],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),{23:$Vf,27:176,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VO,[2,60],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),{23:$Vf,27:177,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VP,[2,63],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o($VP,[2,64],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o([24,28,32,36,41,62,63],[2,65],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA}),o([24,28,32,36,41,63],[2,66],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB}),{36:[1,178]},o($VD,[2,72]),o($VE,[2,39]),{71:[1,179]},o($VE,[2,41]),{32:[1,180]},{76:181,78:$Vn},{78:[1,182]},{76:183,78:$Vn},{23:$Vf,27:184,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($VI,[2,86]),{76:185,78:$Vn},{24:[1,187],26:[1,188],91:186,94:$VQ,95:$VR},{24:[1,192],26:[1,193],91:191,94:$VQ,95:$VR},{91:194,94:$VQ,95:$VR},{23:$Vf,27:195,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:196,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{78:$VS,99:197},{36:[1,199],41:$VT},o($VH,[2,121]),{24:[1,201]},{23:$Vf,27:202,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Ve,[2,20]),{26:[1,203],28:[1,204]},{25:205,51:$Vo,52:$Vp,53:$Vq},o($Ve,[2,21]),{32:[1,206]},o([32,36],[2,33],{41:$VU}),o($VV,[2,36]),o($VV,[2,37],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),{23:$Vf,27:166,30:$VK,35:$Vg,40:208,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{35:[1,209]},{23:$Vf,27:210,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($Ve,[2,32]),{28:[1,211],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{23:$Vf,27:212,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o([26,28],[2,52]),o($Ve,[2,124]),o($VH,[2,125],{37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC}),o($VO,[2,61],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o($VO,[2,62],{54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy}),o($VD,[2,45]),{32:[1,213]},o($VW,[2,80]),o($Ve,[2,90],{77:214,80:[1,215]}),{84:216,86:217,87:$VX},o($Ve,[2,91]),{36:[1,219],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Ve,[2,99]),{23:[1,220]},{25:221,51:$Vo,52:$Vp,53:$Vq},{23:$Vf,27:222,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:[2,104]},{23:[2,105]},{23:[1,223]},{25:224,51:$Vo,52:$Vp,53:$Vq},{23:$Vf,27:225,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:[1,226]},{28:[1,227],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{36:[1,228],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Ve,[2,111]),{79:[1,230],98:$VY,101:229,102:231},{78:$VS,99:233},{23:$VJ,104:234},{25:235,51:$Vo,52:$Vp,53:$Vq},{28:[1,236],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{30:[1,237],33:[1,238]},o($Ve,[2,24]),{38:[1,239]},{28:[1,240]},{23:$Vf,27:166,30:$VK,35:$Vg,42:241,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{32:[1,242],41:$VU},{23:$Vf,27:166,30:$VK,31:243,35:$Vg,36:$VL,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{28:[1,244],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Ve,[2,46]),{28:[1,245],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($VW,[2,79]),o($Ve,[2,85]),{14:247,75:$V7,76:246,78:$Vn},{79:[2,98],85:248,86:249,87:$VX,88:[1,250]},o($VZ,[2,95]),{23:$Vf,27:251,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{28:[1,252]},{36:[2,100]},{26:[1,253]},{28:[2,109],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{36:[2,101]},{26:[1,254]},{28:[2,107],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{36:[2,102]},{23:$Vf,27:255,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{28:[1,256]},{79:[1,257]},o($Ve,[2,114]),{79:$V_,98:$VY,102:259,103:258},{23:[1,260]},o($Ve,[2,112]),o($VH,[2,120]),o($VH,[2,122]),o($Ve,[2,19]),{23:$Vf,27:166,30:$VK,31:261,32:$VL,35:$Vg,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{34:[1,262]},{26:[1,263],28:[1,264]},o($Ve,[2,29]),o($VV,[2,35]),o($VV,[2,38]),{36:[1,265]},o($Ve,[2,31]),o($Ve,[2,47]),o($Ve,[2,88]),o($Ve,[2,89]),{79:[1,266]},o($VZ,[2,94]),{24:[1,267]},{24:[1,268],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Ve,[2,92]),{23:$Vf,27:269,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:270,35:$Vg,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{36:[2,103],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},o($Ve,[2,110]),o($Ve,[2,113]),{79:[2,115]},{79:$V_,98:$VY,102:259,103:271},{35:[1,272]},{32:[1,273]},{35:[1,274]},{30:[1,275],33:[1,276]},o($Ve,[2,27]),{28:[1,277]},o($Ve,[2,93]),{4:278,6:3,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},{4:279,6:3,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},{28:[2,108],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{28:[2,106],37:$Vr,38:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,58:$Vx,59:$Vy,60:$Vz,61:$VA,62:$VB,63:$VC},{79:[2,118]},{23:$VJ,36:[1,280],100:281,104:156},{28:[1,282]},{23:$Vf,27:166,30:$VK,31:283,35:$Vg,36:$VL,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{23:$Vf,27:166,30:$VK,31:284,32:$VL,35:$Vg,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},{34:[1,285]},o($Ve,[2,30]),{6:33,7:$V0,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,79:[2,97],81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd},o($VZ,[2,96],{8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,6:33,7:$V0,22:$V1,23:$V2,39:$V3,72:$V4,73:$V5,74:$V6,75:$V7,81:$V8,82:$V9,83:$Va,89:$Vb,96:$Vc,98:$Vd}),{78:$VS,99:286},{36:[1,287],41:$VT},o($Ve,[2,23]),{36:[1,288]},{32:[1,289]},{35:[1,290]},o($V$,[2,116]),{78:$VS,99:291},{28:[1,292]},{28:[1,293]},{23:$Vf,27:166,30:$VK,31:294,35:$Vg,36:$VL,40:164,42:165,43:46,49:44,64:$Vh,65:45,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:$Vm},o($V$,[2,117]),o($Ve,[2,25]),o($Ve,[2,26]),{36:[1,295]},{28:[1,296]},o($Ve,[2,28])],
defaultActions: {32:[2,1],189:[2,104],190:[2,105],220:[2,100],223:[2,101],226:[2,102],258:[2,115],271:[2,118]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Access } = require('../tools/expression/Access');
    const { Literal } = require('../tools/expression/Literal');
    const { Declaration } = require('../tools/sentences/Declaration');
    const { Console } = require('../tools/sentences/Console');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip comments */
break;
case 2:/* IGNORE */
break;
case 3:return 68
break;
case 4:return 67
break;
case 5:return 66
break;
case 6:return 66
break;
case 7:return 66
break;
case 8:return 56
break;
case 9:return 57
break;
case 10:return 55
break;
case 11:return 54
break;
case 12:return 58
break;
case 13:return 59
break;
case 14:return 28
break;
case 15:return 24
break;
case 16:return 41
break;
case 17:return 45
break;
case 18:return 37
break;
case 19:return 38
break;
case 20:return '<='
break;
case 21:return '>='
break;
case 22:return 60
break;
case 23:return 61
break;
case 24:return 63
break;
case 25:return 62
break;
case 26:return 64
break;
case 27:return 26
break;
case 28:return 35
break;
case 29:return 36 
break;
case 30:return 78
break;
case 31:return 79
break;
case 32:return 30
break;
case 33:return 32
break;
case 34:return 79
break;
case 35:return 79
break;
case 36:return 22
break;
case 37:return 92
break;
case 38:return 39
break;
case 39:return 75
break;
case 40:return 80
break;
case 41:return 83
break;
case 42:return 88
break;
case 43:return 87
break;
case 44:return 81
break;
case 45:return 82
break;
case 46:return 89
break;
case 47:return 96
break;
case 48:return 97
break;
case 49:return 72
break;
case 50:return 73
break;
case 51:return 74
break;
case 52:return 98
break;
case 53:return 51
break;
case 54:return 52
break;
case 55:return 53
break;
case 56:return 69
break;
case 57:return 70
break;
case 58:return 94
break;
case 59:return 95
break;
case 60:return 48
break;
case 61:return 50
break;
case 62:return 33
break;
case 63:return 34
break;
case 64:return 'RESERV_ANY'
break;
case 65:return 46
break;
case 66:return 'RESERV_TYPE'
break;
case 67:return 23;
break;
case 68:return 5;
break;
case 69:return 'TOKEN_DESC';
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(([-]?[0-9]+(\.[0-9]+))))/i,/^(?:(([-]?[0-9]+)))/i,/^(?:(("([^"]|(\\.))*")))/i,/^(?:(('([^']|(\\.)|(".))*')))/i,/^(?:((`([^`]|(\\.)|(".))*`)))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\})/i,/^(?:let\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:default\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:of\b)/i,/^(?:in\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:new\b)/i,/^(?:Array\b)/i,/^(?:any\b)/i,/^(?:length\b)/i,/^(?:type\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gram;
exports.Parser = gram.Parser;
exports.parse = function () { return gram.parse.apply(gram, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}